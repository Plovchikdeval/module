# meta developer: @Androfon_AI
# meta name: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# meta version: 1.0

# 01001000 01101001 01101011 01101011 01100001 00100000 01010101 01110011 01100101 01110010 01000010 01101111 01110100
# 00100000 01001101 01101111 01100100 01110101 01101100 01100101 01110011 00100000 01000111 01100101 01101110 01100101 01110010 01100001 01110100 01101111 01110010

from telethon import functions
from datetime import datetime
from .. import loader, utils


class DevicesModule(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.
    """

    strings = {
        "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "no_devices": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.",
        "device_info": (
            "<b><emoji document_id=5877318502947229960>üíª</emoji> –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> <code>{device_model}</code>\n"
            "<b><emoji document_id=5877482652302315100>üìÅ</emoji> –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> <code>{platform}</code>\n"
            "<b><emoji document_id=5877680341057015789>üìÅ</emoji> –û–°:</b> <code>{system_version}</code>\n"
            "<b><emoji document_id=5877307202888273539>üì•</emoji> –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b> <code>{app_name}</code> (v<code>{app_version}</code>)\n"
            "<b><emoji document_id=5967432491684860012>üõú</emoji> IP-–∞–¥—Ä–µ—Å:</b> <code>{ip}</code>\n"
            "<b><emoji document_id=5883955653348692941>üó∫</emoji> –°—Ç—Ä–∞–Ω–∞:</b> <code>{country}</code>\n"
            "<b><emoji document_id=5884365569322390150>üó∫</emoji> –†–µ–≥–∏–æ–Ω:</b> <code>{region}</code>\n"
            "<b><emoji document_id=5877301185639091664>üìÑ</emoji> –°–æ–∑–¥–∞–Ω–æ:</b> <code>{date_created}</code>\n"
            "<b><emoji document_id=5877410604225924969>üîÑ</emoji> –ê–∫—Ç–∏–≤–Ω–æ:</b> <code>{date_active}</code>\n"
            "{current_session}"
        ),
        "current_session_marker": "<b><emoji document_id=5825794181183836432>‚úîÔ∏è</emoji> (–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)</b>",
        "error_fetching": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.",
        "cmd_devices_desc": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.",
        "fetching_message": "<b><emoji document_id=5900104897885376843>üïì</emoji> –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö...</b>",
        "header": "<b><emoji document_id=5877318502947229960>üíª</emoji> –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n",
        "separator": "‚Äî" * 20 + "\n",
    }

    async def devicescmd(self, message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.
        """
        await message.edit(self.strings("fetching_message", message))
        try:
            devices = await self.client(functions.account.GetAuthorizationsRequest())

            if not devices.authorizations:
                await message.edit(self.strings("no_devices", message))
                return

            response_parts = [self.strings("header", message)]

            for i, device in enumerate(devices.authorizations):
                date_created = device.date_created.strftime("%Y-%m-%d %H:%M:%S")
                date_active = device.date_active.strftime("%Y-%m-%d %H:%M:%S")

                current_session_marker = ""
                if device.current:
                    current_session_marker = self.strings("current_session_marker", message)

                response_parts.append(
                    self.strings("device_info", message).format(
                        device_model=utils.escape_html(device.device_model or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        platform=utils.escape_html(device.platform or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        system_version=utils.escape_html(device.system_version or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        app_name=utils.escape_html(device.app_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        app_version=utils.escape_html(device.app_version or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        ip=utils.escape_html(device.ip or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        country=utils.escape_html(device.country or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        region=utils.escape_html(device.region or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        date_created=date_created,
                        date_active=date_active,
                        current_session=current_session_marker,
                    )
                )
                if i < len(devices.authorizations) - 1:
                    response_parts.append(self.strings("separator", message))

            await message.edit("\n".join(response_parts))

        except Exception as e:
            await message.edit(self.strings("error_fetching", message) + f" <code>{utils.escape_html(str(e))}</code>")