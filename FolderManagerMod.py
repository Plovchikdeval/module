# meta developer: @yourhandle
# meta name: –ú–µ–Ω–µ–¥–∂–µ—Ä –ü–∞–ø–æ–∫
# meta version: 1.5

import logging
from typing import Union

from telethon import types
from telethon.tl import types as tl_types
from telethon.functions.folders import CreateChatFolder, DeleteChatFolder, UpdateChatFolder
from telethon.tl.functions.account import GetChatFolders # GetChatFolders –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ telethon.tl.functions.account

from .. import loader, utils

logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Ç–∏–ø –¥–ª—è InputPeer
InputPeerType = Union[tl_types.InputPeerUser, tl_types.InputPeerChat, tl_types.InputPeerChannel]


@loader.tds
class FolderManagerMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏ —á–∞—Ç–æ–≤ –≤ Telegram.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–∞–ø–∫–∏, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —á–∞—Ç—ã –∏–∑ –ø–∞–ø–æ–∫.
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            {
                "default_handle": "@yourhandle",
            }
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def _get_folder_by_title(self, title: str) -> Union[types.Folder, None]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–∞–ø–∫–∏ –ø–æ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        folders_obj = await self.client(GetChatFolders()) # GetChatFolders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Folders
        for folder in folders_obj.folders: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ Folders
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (id > 0)
            # –∏ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ Folder (–Ω–µ FolderPeer)
            if isinstance(folder, types.Folder) and folder.title == title and folder.id > 0:
                return folder
        return None

    async def _resolve_chat_entity(self, message, arg_string: str) -> Union[types.User, types.Chat, types.Channel, None]:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        –∏–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω–µ–º.
        """
        if arg_string:
            try:
                return await self.client.get_entity(arg_string)
            except ValueError:
                return None
        
        # –ï—Å–ª–∏ arg_string –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.is_reply:
            reply_msg = await message.get_reply_message()
            if reply_msg and reply_msg.peer_id:
                try:
                    return await self.client.get_entity(reply_msg.peer_id)
                except ValueError:
                    return None
        
        # –ï—Å–ª–∏ arg_string –Ω–µ —É–∫–∞–∑–∞–Ω –∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        if message.chat: # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
            try:
                return await self.client.get_entity(message.chat.id)
            except ValueError: # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: `except` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ `try`
                return None
                
        return None

    def _is_peer_in_input_peers(self, target_peer_input: InputPeerType, peer_list: list[InputPeerType]) -> bool:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è InputPeer –≤ —Å–ø–∏—Å–∫–µ InputPeer –æ–±—ä–µ–∫—Ç–æ–≤.
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ ID –∏ —Ç–∏–ø—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è access_hash –¥–ª—è InputPeerUser/InputPeerChannel."""
        for p in peer_list:
            if isinstance(target_peer_input, tl_types.InputPeerUser) and isinstance(p, tl_types.InputPeerUser) and p.user_id == target_peer_input.user_id:
                return True
            elif isinstance(target_peer_input, tl_types.InputPeerChat) and isinstance(p, tl_types.InputPeerChat) and p.chat_id == target_peer_input.chat_id:
                return True
            elif isinstance(target_peer_input, tl_types.InputPeerChannel) and isinstance(p, tl_types.InputPeerChannel) and p.channel_id == target_peer_input.channel_id:
                return True
        return False

    def _remove_peer_from_input_peers(self, target_peer_input: InputPeerType, peer_list: list[InputPeerType]) -> tuple[list[InputPeerType], bool]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è InputPeer –∏–∑ —Å–ø–∏—Å–∫–∞ InputPeer –æ–±—ä–µ–∫—Ç–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏ —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω."""
        new_list = []
        removed = False
        for p in peer_list:
            is_match = False
            if isinstance(target_peer_input, tl_types.InputPeerUser) and isinstance(p, tl_types.InputPeerUser) and p.user_id == target_peer_input.user_id:
                is_match = True
            elif isinstance(target_peer_input, tl_types.InputPeerChat) and isinstance(p, tl_types.InputPeerChat) and p.chat_id == target_peer_input.chat_id:
                is_match = True
            elif isinstance(target_peer_input, tl_types.InputPeerChannel) and isinstance(p, tl_types.InputPeerChannel) and p.channel_id == target_peer_input.channel_id:
                is_match = True
            
            if is_match:
                removed = True
            else:
                new_list.append(p)
        return new_list, removed

    async def mkfoldercmd(self, message):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É —á–∞—Ç–æ–≤.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .mkfolder <–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏>
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏.")
            return

        title = args

        try:
            await self.client(CreateChatFolder( # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                title=title,
                autofill_new_chats=False,
                peers=[], # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø—É—Å—Ç–æ–π –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
                order=0
            ))
            await message.edit(f"<emoji document_id=5825794181183836432>‚úîÔ∏è</emoji> –ü–∞–ø–∫–∞ <b>'{utils.escape_html(title)}'</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏:", exc_info=True)
            await message.edit(f"<emoji document_id=5778527486270770928>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: <code>{utils.escape_html(str(e))}</code>")

    async def rmfoldercmd(self, message):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É —á–∞—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —á–∞—Ç—ã –∏–∑ —É–¥–∞–ª—è–µ–º–æ–π –ø–∞–ø–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ "–í—Å–µ —á–∞—Ç—ã" –∏–ª–∏ "–ê—Ä—Ö–∏–≤", –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –±—ã–ª–∏.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .rmfolder <–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏>
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        folder_title = args
        folder_to_delete = await self._get_folder_by_title(folder_title)

        if not folder_to_delete:
            await message.edit(f"<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ü–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>'{utils.escape_html(folder_title)}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–æ–π.")
            return

        try:
            await self.client(DeleteChatFolder(folder_id=folder_to_delete.id)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await message.edit(f"<emoji document_id=5825794181183836432>‚úîÔ∏è</emoji> –ü–∞–ø–∫–∞ <b>'{utils.escape_html(folder_title)}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏:", exc_info=True)
            await message.edit(f"<emoji document_id=5778527486270770928>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: <code>{utils.escape_html(str(e))}</code>")

    async def lsfolderscmd(self, message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .lsfolders
        """
        try:
            folders_obj = await self.client(GetChatFolders()) # GetChatFolders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Folders
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞–ø–∫–∏ (id > 0)
            user_folders = [folder for folder in folders_obj.folders if isinstance(folder, types.Folder) and folder.id > 0] # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ Folders

            if not user_folders:
                await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤.")
                return

            response = "<emoji document_id=5877316724830768997>üóÉ</emoji> <b>–í–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞–ø–∫–∏ —á–∞—Ç–æ–≤:</b>\n\n"
            for i, folder in enumerate(user_folders):
                response += f"  <emoji document_id=5843862283964390528>üîñ</emoji> <b>{utils.escape_html(folder.title)}</b> (ID: <code>{folder.id}</code>)\n"

            await message.edit(response)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫:", exc_info=True)
            await message.edit(f"<emoji document_id=5778527486270770928>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: <code>{utils.escape_html(str(e))}</code>")

    async def addchattofoldercmd(self, message):
        """
        <emoji document_id=5877219383691972108>‚ûï</emoji> –î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .addchattofolder <–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏> [ID/—é–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞ –∏–ª–∏ —Ä–µ–ø–ª–∞–π]
        –ï—Å–ª–∏ ID/—é–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.
        """
        args = utils.get_args_raw(message).split(maxsplit=1)
        folder_title = args[0] if args else None
        chat_entity_str = args[1] if len(args) > 1 else None

        if not folder_title:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
        if not chat_entity_str and not message.is_reply and not message.chat:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (ID, —é–∑–µ—Ä–Ω–µ–π–º, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ).")
            return

        folder_to_update = await self._get_folder_by_title(folder_title)
        if not folder_to_update:
            await message.edit(f"<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ü–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>'{utils.escape_html(folder_title)}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        chat_entity = await self._resolve_chat_entity(message, chat_entity_str)
        if not chat_entity:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞/—Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.")
            return

        input_peer = await self.client.get_input_entity(chat_entity)

        if self._is_peer_in_input_peers(input_peer, folder_to_update.pinned_peers) or \
           self._is_peer_in_input_peers(input_peer, folder_to_update.unpinned_peers):
            await message.edit(f"<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ß–∞—Ç <b>'{utils.escape_html(utils.get_display_name(chat_entity))}'</b> —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ <b>'{utils.escape_html(folder_title)}'</b>.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ unpinned_peers –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –Ω–æ–≤—ã–π —á–∞—Ç
        updated_unpinned_peers = list(folder_to_update.unpinned_peers)
        updated_unpinned_peers.append(input_peer)

        try:
            await self.client(UpdateChatFolder( # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                folder_id=folder_to_update.id,
                title=folder_to_update.title,
                autofill_new_chats=folder_to_update.autofill_new_chats,
                pinned_peers=list(folder_to_update.pinned_peers),  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö
                unpinned_peers=updated_unpinned_peers,             # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö
                order=folder_to_update.order
            ))
            await message.edit(f"<emoji document_id=5825794181183836432>‚úîÔ∏è</emoji> –ß–∞—Ç <b>'{utils.escape_html(utils.get_display_name(chat_entity))}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–ø–∫—É <b>'{utils.escape_html(folder_title)}'</b>.")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –ø–∞–ø–∫—É:", exc_info=True)
            await message.edit(f"<emoji document_id=5778527486270770928>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –ø–∞–ø–∫—É: <code>{utils.escape_html(str(e))}</code>")

    async def rmchatfromfoldercmd(self, message):
        """
        <emoji document_id=5879896690210639947>üóë</emoji> –£–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .rmchatfromfolder <–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏> [ID/—é–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞ –∏–ª–∏ —Ä–µ–ø–ª–∞–π]
        –ï—Å–ª–∏ ID/—é–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.
        """
        args = utils.get_args_raw(message).split(maxsplit=1)
        folder_title = args[0] if args else None
        chat_entity_str = args[1] if len(args) > 1 else None

        if not folder_title:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
        if not chat_entity_str and not message.is_reply and not message.chat:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (ID, —é–∑–µ—Ä–Ω–µ–π–º, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ).")
            return

        folder_to_update = await self._get_folder_by_title(folder_title)
        if not folder_to_update:
            await message.edit(f"<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ü–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>'{utils.escape_html(folder_title)}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        chat_entity = await self._resolve_chat_entity(message, chat_entity_str)
        if not chat_entity:
            await message.edit("<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞/—Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.")
            return

        input_peer = await self.client.get_input_entity(chat_entity)

        # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤ (pinned –∏ unpinned), –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        updated_pinned_peers, removed_from_pinned = self._remove_peer_from_input_peers(input_peer, folder_to_update.pinned_peers)
        updated_unpinned_peers, removed_from_unpinned = self._remove_peer_from_input_peers(input_peer, folder_to_update.unpinned_peers)

        if not removed_from_pinned and not removed_from_unpinned:
            await message.edit(f"<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –ß–∞—Ç <b>'{utils.escape_html(utils.get_display_name(chat_entity))}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ <b>'{utils.escape_html(folder_title)}'</b>.")
            return

        try:
            await self.client(UpdateChatFolder( # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                folder_id=folder_to_update.id,
                title=folder_to_update.title,
                autofill_new_chats=folder_to_update.autofill_new_chats,
                pinned_peers=updated_pinned_peers,
                unpinned_peers=updated_unpinned_peers,
                order=folder_to_update.order
            ))
            await message.edit(f"<emoji document_id=5825794181183836432>‚úîÔ∏è</emoji> –ß–∞—Ç <b>'{utils.escape_html(utils.get_display_name(chat_entity))}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–ø–∫–∏ <b>'{utils.escape_html(folder_title)}'</b>.")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏:", exc_info=True)
            await message.edit(f"<emoji document_id=5778527486270770928>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏: <code>{utils.escape_html(str(e))}</code>")
