# developer: @Androfon_AI
# name: –®–∞—à–∫–∏
# version: 1.0.4

import asyncio, html, random
from .. import loader, utils

EMPTY = 0
WHITE_MAN = 1
BLACK_MAN = 2
WHITE_KING = 3
BLACK_KING = 4

PIECE_EMOJIS = {
    EMPTY: "‚ñ™Ô∏è",
    "light": "‚ñ´Ô∏è",
    WHITE_MAN: "‚ö™",
    BLACK_MAN: "‚ö´",
    WHITE_KING: "üëë‚ö™",
    BLACK_KING: "üëë‚ö´",
    'selected': "üîò",
    'move_target': "üü¢",
    'capture_target': "üî¥",
}

class CheckersBoard:
    def __init__(self):
        self._board = [[EMPTY for _ in range(8)] for _ in range(8)]
        self._setup_initial_pieces()
        self.current_player = "white"
        self.mandatory_capture_from_pos = None

    def _setup_initial_pieces(self):
        for r in range(8):
            for c in range(8):
                if (r + c) % 2 != 0: # –¢–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
                    if r < 3:
                        self._board[r][c] = BLACK_MAN
                    elif r > 4:
                        self._board[r][c] = WHITE_MAN

    def _is_valid_coord(self, r, c):
        return 0 <= r < 8 and 0 <= c < 8

    def get_piece_at(self, r, c):
        if not self._is_valid_coord(r, c):
            return None
        return self._board[r][c]

    def _set_piece_at(self, r, c, piece):
        if self._is_valid_coord(r, c):
            self._board[r][c] = piece

    def _get_player_color(self, piece):
        if piece in [WHITE_MAN, WHITE_KING]:
            return "white"
        if piece in [BLACK_MAN, BLACK_KING]:
            return "black"
        return None

    def _get_opponent_color(self, color):
        return "black" if color == "white" else "white"

    def _get_moves_for_piece(self, r, c):
        moves = []
        piece = self.get_piece_at(r, c)
        player_color = self._get_player_color(piece)
        opponent_color = self._get_opponent_color(player_color)

        if piece == EMPTY:
            return []

        all_diagonal_directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        
        if piece in [WHITE_MAN, BLACK_MAN]:
            regular_move_directions = []
            if piece == WHITE_MAN:
                regular_move_directions = [(-1, -1), (-1, 1)]
            elif piece == BLACK_MAN:
                regular_move_directions = [(1, -1), (1, 1)]

            # –û–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —à–∞—à–µ–∫
            for dr, dc in regular_move_directions:
                new_r, new_c = r + dr, c + dc
                if self._is_valid_coord(new_r, new_c) and self.get_piece_at(new_r, new_c) == EMPTY:
                    moves.append((r, c, new_r, new_c, False))

            # –•–æ–¥—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º –¥–ª—è —à–∞—à–µ–∫
            for dr, dc in all_diagonal_directions:
                captured_piece_r, captured_piece_c = r + dr, c + dc
                jump_r, jump_c = r + 2 * dr, c + 2 * dc
                
                captured_piece = self.get_piece_at(captured_piece_r, captured_piece_c)

                if (self._is_valid_coord(jump_r, jump_c) and
                    self.get_piece_at(jump_r, jump_c) == EMPTY and
                    self._get_player_color(captured_piece) == opponent_color):
                    
                    moves.append((r, c, jump_r, jump_c, True))

        elif piece in [WHITE_KING, BLACK_KING]:
            for dr, dc in all_diagonal_directions:
                # –û–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –∫–æ—Ä–æ–ª–µ–π
                current_r, current_c = r + dr, c + dc
                while self._is_valid_coord(current_r, current_c) and self.get_piece_at(current_r, current_c) == EMPTY:
                    moves.append((r, c, current_r, current_c, False))
                    current_r += dr
                    current_c += dc

                # –•–æ–¥—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º –¥–ª—è –∫–æ—Ä–æ–ª–µ–π
                path_r, path_c = r + dr, c + dc
                captured_piece_pos = None # Store position of the *first* captured piece

                while self._is_valid_coord(path_r, path_c):
                    current_path_piece = self.get_piece_at(path_r, path_c)
                    current_path_piece_color = self._get_player_color(current_path_piece)

                    if current_path_piece_color == player_color:
                        break # Blocked by own piece
                    elif current_path_piece_color == opponent_color:
                        if captured_piece_pos: # Already captured a piece in this direction
                            break # Blocked by a second piece, no further captures possible
                        captured_piece_pos = (path_r, path_c) # Found the first opponent piece
                    elif current_path_piece == EMPTY:
                        if captured_piece_pos: # Empty square after capturing the first piece
                            moves.append((r, c, path_r, path_c, True))
                    
                    path_r += dr
                    path_c += dc

        return moves

    def get_all_possible_moves(self, player_color):
        all_moves = []
        all_captures = []

        if self.mandatory_capture_from_pos:
            r, c = self.mandatory_capture_from_pos
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã –∏–∑ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            return [m for m in self._get_moves_for_piece(r, c) if m[4]]
            
        for r in range(8):
            for c in range(8):
                piece = self.get_piece_at(r, c)
                if self._get_player_color(piece) == player_color:
                    moves_for_piece = self._get_moves_for_piece(r, c)
                    for move in moves_for_piece:
                        if move[4]: # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç
                            all_captures.append(move)
                        else:
                            all_moves.append(move)
        
        if all_captures: # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∑–∞—Ö–≤–∞—Ç, –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
            return all_captures
        return all_moves # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã

    def _execute_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        piece = self.get_piece_at(start_r, start_c)
        self._set_piece_at(end_r, end_c, piece)
        self._set_piece_at(start_r, start_c, EMPTY)

        if is_capture_move:
            dr = 1 if end_r > start_r else -1
            dc = 1 if end_c > start_c else -1

            current_r, current_c = start_r + dr, start_c + dc
            # –ò—â–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É –ø–æ –ø—É—Ç–∏ –∏ —É–¥–∞–ª—è–µ–º –µ–µ
            while (current_r, current_c) != (end_r, end_c):
                if self.get_piece_at(current_r, current_c) != EMPTY:
                    self._set_piece_at(current_r, current_c, EMPTY)
                    break # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–∏–≥—É—Ä—É –∑–∞ –æ–¥–∏–Ω –ø—Ä—ã–∂–æ–∫
                current_r += dr
                current_c += dc
        
        return is_capture_move

    def make_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        piece = self.get_piece_at(start_r, start_c)
        
        self._execute_move(start_r, start_c, end_r, end_c, is_capture_move)
        
        # –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫–∏
        if piece == WHITE_MAN and end_r == 0:
            self._set_piece_at(end_r, end_c, WHITE_KING)
        elif piece == BLACK_MAN and end_r == 7:
            self._set_piece_at(end_r, end_c, BLACK_KING)
        
        if is_capture_move:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            further_captures = [m for m in self._get_moves_for_piece(end_r, end_c) if m[4]]
            if further_captures:
                self.mandatory_capture_from_pos = (end_r, end_c)
                return True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã
            else:
                self.mandatory_capture_from_pos = None
                self.switch_turn()
                return False # –ó–∞—Ö–≤–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
        else:
            self.mandatory_capture_from_pos = None
            self.switch_turn()
            return False # –û–±—ã—á–Ω—ã–π —Ö–æ–¥, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç

    def switch_turn(self):
        self.current_player = self._get_opponent_color(self.current_player)

    def is_game_over(self):
        white_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "white")
        black_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "black")

        if white_pieces == 0:
            return "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö"
        if black_pieces == 0:
            return "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
        if not self.get_all_possible_moves("white"):
            return "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö (–Ω–µ—Ç —Ö–æ–¥–æ–≤ —É –±–µ–ª—ã—Ö)"
        if not self.get_all_possible_moves("black"):
            return "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö (–Ω–µ—Ç —Ö–æ–¥–æ–≤ —É —á–µ—Ä–Ω—ã—Ö)"

        return None

    def to_list_of_emojis(self, selected_pos=None, possible_moves_with_info=None):
        board_emojis = []
        possible_moves_with_info = possible_moves_with_info if possible_moves_with_info else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–ª–µ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        # move_info is (end_r, end_c, is_capture)
        possible_move_targets_map = {(move_info[0], move_info[1]): move_info[2] for move_info in possible_moves_with_info}

        for r in range(8):
            row_emojis = []
            for c in range(8):
                piece = self.get_piece_at(r, c)
                emoji = PIECE_EMOJIS[piece]

                if (r, c) == selected_pos:
                    emoji = PIECE_EMOJIS['selected']
                elif (r, c) in possible_move_targets_map:
                    is_capture_move = possible_move_targets_map[(r, c)]
                    emoji = PIECE_EMOJIS['capture_target'] if is_capture_move else PIECE_EMOJIS['move_target']
                elif (r + c) % 2 == 0: # –°–≤–µ—Ç–ª—ã–µ –∫–ª–µ—Ç–∫–∏
                    emoji = PIECE_EMOJIS['light']
                
                row_emojis.append(emoji)
            board_emojis.append(row_emojis)
        return board_emojis
    
    def get_valid_moves_for_selection(self, current_r, current_c):
        piece_moves_full_info = self._get_moves_for_piece(current_r, current_c)
        
        all_game_moves_full_info = self.get_all_possible_moves(self.current_player)
        all_game_captures_full_info = [m for m in all_game_moves_full_info if m[4]]
        
        if all_game_captures_full_info:
            if self.mandatory_capture_from_pos:
                if (current_r, current_c) == self.mandatory_capture_from_pos:
                    # –¢–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if is_cap]
                else:
                    # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Å —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã, —Ç–æ —Ö–æ–¥–æ–≤ –Ω–µ—Ç
                    return []
            else:
                # –ï—Å–ª–∏ –≤ —Ü–µ–ª–æ–º –µ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã,
                # –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ö–≤–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–∞.
                return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if is_cap and (s_r,s_c,e_r,e_c,is_cap) in all_game_captures_full_info]
        else:
            # –ó–∞—Ö–≤–∞—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã,
            # –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±—ã—á–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–∞.
            # (all_game_moves_full_info –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã)
            return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if not is_cap and (s_r,s_c,e_r,e_c,is_cap) in all_game_moves_full_info]


@loader.tds
class Checkers(loader.Module):
    """–®–∞—à–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤–¥–≤–æ—ë–º."""
    strings = {
        "name": "–®–∞—à–∫–∏"
    }

    async def client_ready(self):
        self._board_obj = None
        self._game_message = None
        self._game_chat_id = None
        self._selected_piece_pos = None
        self._possible_moves_for_selected = []
        self.saymyname = html.escape((await self.client.get_me()).first_name)
        self.colorName = "—Ä–∞–Ω–¥–æ–º"
        self.host_color = None
        self.game_running = False
        self.game_reason_ended = None
        self.players_ids = []
        self.opponent_id = None
        self.opponent_name = None
        self.player_white_id = None
        self.player_black_id = None
        self._game_board_call = None

    async def purgeSelf(self):
        self._board_obj = None
        self._game_message = None
        self._game_chat_id = None
        self._selected_piece_pos = None
        self._possible_moves_for_selected = []
        self.colorName = "—Ä–∞–Ω–¥–æ–º"
        self.host_color = None
        self.game_running = False
        self.game_reason_ended = None
        self.players_ids = []
        self.opponent_id = None
        self.opponent_name = None
        self.player_white_id = None
        self.player_black_id = None
        self._game_board_call = None

    async def settings_menu(self, call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id not in self.players_ids:
            await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return  
        await call.edit(
            text=f"<emoji document_id=5877260593903177342>‚öô</emoji> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏\n"
                 f"| - > –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {self.colorName} —Ü–≤–µ—Ç",
            reply_markup=[
                [
                    {"text":f"–¶–≤–µ—Ç (—Ö–æ—Å—Ç–∞): {self.colorName}","callback":self.set_color}
                ],
                [
                    {"text":"–í–µ—Ä–Ω—É—Ç—å—Å—è","callback":self.back_to_invite}
                ]
            ]
        )

    async def back_to_invite(self, call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
        if call.from_user.id not in self.players_ids:
            await call.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return
        await call.edit(
            text=f"<a href='tg://user?id={self.opponent_id}'>{self.opponent_name}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?\n-- --\n"
                 f"<emoji document_id=5877260593903177342>‚öô</emoji> –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                 f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {self.colorName} —Ü–≤–µ—Ç",
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù–µ—Ç", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu}
                ]
            ]
        )

    async def set_color(self, call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id not in self.players_ids:
            await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return
        await call.edit(
            text=f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏.\n"
                 f"| - > <emoji document_id=5875271289605722323>üçî</emoji> –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞: {self.colorName} —Ü–≤–µ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –µ–≥–æ —Ñ–∏–≥—É—Ä",
            reply_markup=[
                [
                    {"text":("‚úÖ " if self.host_color == "white" else "") + "–ë–µ–ª—ã–µ","callback":self.handle_color_choice,"args":("white","–±–µ–ª—ã–π",)},
                    {"text":("‚úÖ " if self.host_color == "black" else "") + "–ß—ë—Ä–Ω—ã–µ","callback":self.handle_color_choice,"args":("black","—á—ë—Ä–Ω—ã–π",)}
                ],
                [
                    {"text":"–†–∞–Ω–¥–æ–º", "callback":self.handle_color_choice,"args":(None,"—Ä–∞–Ω–¥–æ–º")}
                ],
                [
                    {"text":"–û–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback":self.settings_menu}
                ]
            ]
        )

    async def handle_color_choice(self, call, color, txt):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id not in self.players_ids:
            await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return
        self.colorName = txt
        self.host_color = color
        await self.set_color(call)

    @loader.command() 
    async def checkers(self, message):
        """[reply/username/id] –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —á–∞—Ç–µ"""
        if self._board_obj:
            await message.edit("<emoji document_id=5370724846936267183>ü§î</emoji> –ü–∞—Ä—Ç–∏—è —É–∂–µ –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –µ—ë —Å <code>.stopgame</code>")
            return
        await self.purgeSelf()
        self._game_message = message
        self._game_chat_id = message.chat_id

        if message.is_reply:
            r = await message.get_reply_message()
            opponent = r.sender
            self.opponent_id = opponent.id
            self.opponent_name = html.escape(opponent.first_name)
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                await message.edit("<emoji document_id=5370724846936267183>ü§î</emoji> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å –∫–µ–º –∏–≥—Ä–∞—Ç—å")
                return
            opponent_str = args[0]
            try:
                if opponent_str.isdigit():
                    self.opponent_id = int(opponent_str)
                    opponent = await self.client.get_entity(self.opponent_id)
                    self.opponent_name = html.escape(opponent.first_name)
                else:
                    opponent = await self.client.get_entity(opponent_str)
                    self.opponent_name = html.escape(opponent.first_name)
                    self.opponent_id = opponent.id
            except Exception:
                await message.edit("‚ùå –Ø –Ω–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        if self.opponent_id == self._game_message.sender_id:
            await message.edit("<emoji document_id=5384398004172102616>üòà</emoji> –û–¥–∏–Ω–æ—á–Ω—ã–µ —à–∞—à–∫–∏? –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ—Ç.")
            return

        self.players_ids = [self.opponent_id, self._game_message.sender_id]
        
        await self.inline.form(
            message = message,
            text = f"<a href='tg://user?id={self.opponent_id}'>{self.opponent_name}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?\n-- --\n"
                   f"<emoji document_id=5877260593903177342>‚öô</emoji> –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                   f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {self.colorName} —Ü–≤–µ—Ç",
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù–µ—Ç", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu}
                ]
            ], 
            disable_security = True,
            on_unload=self.outdated_game
        )

    @loader.command() 
    async def stopgame(self, message):
        """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
        await self.purgeSelf()
        await message.edit("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã <emoji document_id=5879896690210639947>üóë</emoji>")

    async def accept_game(self, call, data):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –∏–≥—Ä—É, –∏ —á—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
        if call.from_user.id == self._game_message.sender_id:
            await call.answer("–î–∞–π —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å!")
            return
        if call.from_user.id not in self.players_ids:
            await call.answer("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–≥—Ä—É!")
            return
        
        if data == 'y':
            self._board_obj = CheckersBoard()
            if not self.host_color:
                await call.edit(text="–í—ã–±–∏—Ä–∞—é —Å—Ç–æ—Ä–æ–Ω—ã... <emoji document_id=5960608239623082921>üé≤</emoji>")
                await asyncio.sleep(0.5)
                self.host_color = self.ranColor()
            
            if self.host_color == "white":
                self.player_white_id = self._game_message.sender_id
                self.player_black_id = self.opponent_id
            else:
                self.player_white_id = self.opponent_id
                self.player_black_id = self._game_message.sender_id

            text = await self.get_game_status_text()
            await call.edit(text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏... <emoji document_id=5875431869842985304>üéõ</emoji>")
            await asyncio.sleep(0.5)
            
            self.game_running = True
            self._game_board_call = call
            
            await call.edit(text="<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è —Ñ–∏–≥—É—Ä –≤–∫–ª—é—á–∏—Ç–µ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É!")
            await asyncio.sleep(2.5)
            await self.render_board(text, call)
        else:
            await call.edit(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ. <emoji document_id=5778527486270770928>‚ùå</emoji>")
            await self.purgeSelf()

    async def render_board(self, text, call):
        board_emojis_grid = self._board_obj.to_list_of_emojis(self._selected_piece_pos, self._possible_moves_for_selected)
        
        board_display_str = "\n"
        for row in board_emojis_grid:
            board_display_str += "".join(row) + "\n"
        
        full_message_text = text + "\n" + board_display_str

        btns = []
        for r in range(8):
            row_btns = []
            for c in range(8):
                # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø—É—Å—Ç—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ –¥–æ—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                row_btns.append({"text": " ", "callback": self.handle_click, "args":(r, c,)}) 
            btns.append(row_btns)

        await call.edit(
            text = full_message_text,
            reply_markup = btns,
            disable_security = True
        )

    async def handle_click(self, call, r, c):
        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            await call.answer(f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}. –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .checkers")
            return
        
        if call.from_user.id not in self.players_ids:
            await call.answer("–ü–∞—Ä—Ç–∏—è –Ω–µ –≤–∞—à–∞ –∏–ª–∏ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–∞!")
            return
        
        if not self.game_running:
            await call.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (–Ω–µ –ø—Ä–∏–Ω—è—Ç–∞).")
            return
        
        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        if call.from_user.id != current_player_id:
            await call.answer("–°–µ–π—á–∞—Å —Ö–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞!")
            return

        piece_at_click = self._board_obj.get_piece_at(r, c)
        player_color_at_click = self._board_obj._get_player_color(piece_at_click)

        if self._selected_piece_pos is None:
            # –í—ã–±–æ—Ä —Ñ–∏–≥—É—Ä—ã
            if player_color_at_click == self._board_obj.current_player:
                if self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_from_pos != (r, c):
                    await call.answer("–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏!")
                    return

                possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                
                if possible_moves_with_info:
                    self._selected_piece_pos = (r, c)
                    self._possible_moves_for_selected = possible_moves_with_info
                    await call.answer("–®–∞—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ–¥–∏—Ç—å.")
                    await self.render_board(await self.get_game_status_text(), call)
                else:
                    await call.answer("–î–ª—è —ç—Ç–æ–π —à–∞—à–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã)!")
            else:
                await call.answer("–¢—É—Ç –Ω–µ—Ç –≤–∞—à–µ–π —à–∞—à–∫–∏ –∏–ª–∏ —ç—Ç–æ —Å–≤–µ—Ç–ª–∞—è –∫–ª–µ—Ç–∫–∞!")
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
            start_r, start_c = self._selected_piece_pos
            
            if (r, c) == (start_r, start_c):
                # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
                self._selected_piece_pos = None
                self._possible_moves_for_selected = []
                await call.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
                await self.render_board(await self.get_game_status_text(), call)
                return

            # –ò—â–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ü–µ–ª—å—é –¥–ª—è —Ö–æ–¥–∞
            target_move_info = None
            for move_info in self._possible_moves_for_selected:
                if (move_info[0], move_info[1]) == (r, c):
                    target_move_info = move_info
                    break

            if target_move_info:
                end_r, end_c, is_capture_move = target_move_info
                made_capture_and_can_jump_again = self._board_obj.make_move(start_r, start_c, end_r, end_c, is_capture_move)
                
                if made_capture_and_can_jump_again:
                    # –ï—Å–ª–∏ –±—ã–ª –∑–∞—Ö–≤–∞—Ç –∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω, —Ñ–∏–≥—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                    self._selected_piece_pos = (end_r, end_c)
                    self._possible_moves_for_selected = self._board_obj.get_valid_moves_for_selection(end_r, end_c)
                    await call.answer("–ó–∞—Ö–≤–∞—Ç! –°–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞—Ö–≤–∞—Ç.")
                else:
                    # –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                    self._selected_piece_pos = None
                    self._possible_moves_for_selected = []
                    await call.answer("–•–æ–¥ —Å–¥–µ–ª–∞–Ω.")
                
                game_over_status = self._board_obj.is_game_over()
                if game_over_status:
                    self.game_running = False
                    self.game_reason_ended = game_over_status
                    await call.answer(f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}")
                    await self.render_board(await self.get_game_status_text(), call)
                    await self.purgeSelf() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
                    return
                
                await self.render_board(await self.get_game_status_text(), call)
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—å—é –¥–ª—è —Ö–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–≤–æ—é —à–∞—à–∫—É
                if player_color_at_click == self._board_obj.current_player:
                    if self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_from_pos != (r, c):
                        await call.answer("–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏!")
                        return
                    
                    possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                    
                    if possible_moves_with_info:
                        self._selected_piece_pos = (r, c)
                        self._possible_moves_for_selected = possible_moves_with_info
                        await call.answer("–í—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è —à–∞—à–∫–∞.")
                        await self.render_board(await self.get_game_status_text(), call)
                    else:
                        await call.answer("–î–ª—è —ç—Ç–æ–π —à–∞—à–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã)!")
                else:
                    await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥ –∏–ª–∏ —Ü–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–µ–π —à–∞—à–∫–æ–π!")

    async def get_game_status_text(self):
        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            self.game_running = False
            self.game_reason_ended = game_over_status
            
            # Determine winner's name
            winner_name = ""
            if "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö" in game_over_status:
                winner_name = self.saymyname if self.player_white_id == self._game_message.sender_id else self.opponent_name
                return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n<emoji document_id=5994502837327892086>üéâ</emoji> –ü–æ–±–µ–¥–∏–ª(–∞) {winner_name} (–±–µ–ª—ã–µ)!"
            elif "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö" in game_over_status:
                winner_name = self.saymyname if self.player_black_id == self._game_message.sender_id else self.opponent_name
                return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n<emoji document_id=5994502837327892086>üéâ</emoji> –ü–æ–±–µ–¥–∏–ª(–∞) {winner_name} (—á–µ—Ä–Ω—ã–µ)!"
            return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}"

        current_player_name = self.saymyname if (self._board_obj.current_player == "white" and self.player_white_id == self._game_message.sender_id) or \
                                                 (self._board_obj.current_player == "black" and self.player_black_id == self._game_message.sender_id) else self.opponent_name
        
        white_player_name = self.saymyname if self.player_white_id == self._game_message.sender_id else self.opponent_name
        black_player_name = self.saymyname if self.player_black_id == self._game_message.sender_id else self.opponent_name

        status_text = f"‚ôî –ë–µ–ª—ã–µ - {white_player_name}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {black_player_name}\n\n"
        
        if self._board_obj.current_player == "white":
            status_text += f"<emoji document_id=5830060857530257978>‚û°Ô∏è</emoji> –•–æ–¥ –±–µ–ª—ã—Ö ({current_player_name})"
        else:
            status_text += f"<emoji document_id=5830060857530257978>‚û°Ô∏è</emoji> –•–æ–¥ —á—ë—Ä–Ω—ã—Ö ({current_player_name})"
        
        if self._board_obj.mandatory_capture_from_pos:
            status_text += "\n<emoji document_id=5879813604068298387>‚ùóÔ∏è</emoji> –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç!"

        return status_text

    async def outdated_game(self):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ç–∞–π–º–∞—É—Ç—É)
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—á–∏—â–∞–µ–º –µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.game_running or self._board_obj:
            await self.purgeSelf()

    def ranColor(self):
        return "white" if random.randint(1,2) == 1 else "black"
