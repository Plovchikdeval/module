# meta developer: @Androfon_AI
# meta name: –®–∞—à–∫–∏
# meta version: 1.2.0 # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

import asyncio, html, random
from .. import loader, utils

EMPTY = 0
WHITE_MAN = 1
BLACK_MAN = 2
WHITE_KING = 3
BLACK_KING = 4

PIECE_EMOJIS = {
    EMPTY: ".",
    "light": " ",
    WHITE_MAN: "‚ö™",
    BLACK_MAN: "‚ö´",
    WHITE_KING: "üåù",
    BLACK_KING: "üåö",
    'selected': "üîò",
    'move_target': "üü¢",
    'capture_target': "üî¥",
}

class CheckersBoard:
    def __init__(self, mandatory_captures_enabled=True):
        self._board = [[EMPTY for _ in range(8)] for _ in range(8)]
        self._setup_initial_pieces()
        self.current_player = "white"
        self.mandatory_capture_from_pos = None # –ü–æ–∑–∏—Ü–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù —Å–ª–µ–¥—É—é—â–∏–π –∑–∞—Ö–≤–∞—Ç (–¥–ª—è –º—É–ª—å—Ç–∏-–ø—Ä—ã–∂–∫–∞)
        self.mandatory_captures_enabled = mandatory_captures_enabled # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∑—è—Ç–∏–π

    def _setup_initial_pieces(self):
        for r in range(8):
            for c in range(8):
                if (r + c) % 2 != 0: # –¢–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
                    if r < 3:
                        self._board[r][c] = BLACK_MAN
                    elif r > 4:
                        self._board[r][c] = WHITE_MAN

    def _is_valid_coord(self, r, c):
        return 0 <= r < 8 and 0 <= c < 8

    def get_piece_at(self, r, c):
        if not self._is_valid_coord(r, c):
            return None
        return self._board[r][c]

    def _set_piece_at(self, r, c, piece):
        if self._is_valid_coord(r, c):
            self._board[r][c] = piece

    def _get_player_color(self, piece):
        if piece in [WHITE_MAN, WHITE_KING]:
            return "white"
        if piece in [BLACK_MAN, BLACK_KING]:
            return "black"
        return None

    def _get_opponent_color(self, color):
        return "black" if color == "white" else "white"

    def _get_moves_for_piece(self, r, c):
        moves = [] # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (start_r, start_c, end_r, end_c, is_capture)
        piece = self.get_piece_at(r, c)
        player_color = self._get_player_color(piece)
        opponent_color = self._get_opponent_color(player_color)

        if piece == EMPTY:
            return []

        all_diagonal_directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        
        if piece in [WHITE_MAN, BLACK_MAN]:
            regular_move_directions = []
            if piece == WHITE_MAN:
                regular_move_directions = [(-1, -1), (-1, 1)]
            elif piece == BLACK_MAN:
                regular_move_directions = [(1, -1), (1, 1)]

            # –û–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —à–∞—à–µ–∫
            for dr, dc in regular_move_directions:
                new_r, new_c = r + dr, c + dc
                if self._is_valid_coord(new_r, new_c) and self.get_piece_at(new_r, new_c) == EMPTY:
                    moves.append((r, c, new_r, new_c, False)) # False = –Ω–µ –∑–∞—Ö–≤–∞—Ç

            # –•–æ–¥—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º –¥–ª—è —à–∞—à–µ–∫
            for dr, dc in all_diagonal_directions:
                captured_piece_r, captured_piece_c = r + dr, c + dc
                jump_r, jump_c = r + 2 * dr, c + 2 * dc
                
                captured_piece = self.get_piece_at(captured_piece_r, captured_piece_c)

                if (self._is_valid_coord(jump_r, jump_c) and
                    self.get_piece_at(jump_r, jump_c) == EMPTY and
                    self._get_player_color(captured_piece) == opponent_color):
                    
                    moves.append((r, c, jump_r, jump_c, True)) # True = –∑–∞—Ö–≤–∞—Ç

        elif piece in [WHITE_KING, BLACK_KING]:
            for dr, dc in all_diagonal_directions:
                current_r, current_c = r + dr, c + dc
                captured_piece_pos = None # –•—Ä–∞–Ω–∏—Ç –ø–æ–∑–∏—Ü–∏—é (r,c) –ø–µ—Ä–≤–æ–π –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

                while self._is_valid_coord(current_r, current_c):
                    piece_on_path = self.get_piece_at(current_r, current_c)
                    piece_on_path_color = self._get_player_color(piece_on_path)

                    if piece_on_path == EMPTY:
                        if captured_piece_pos is None:
                            # –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –¥–ª—è –¥–∞–º–∫–∏ (—Å–∫–æ–ª—å–∂–µ–Ω–∏–µ –ø–æ –ø—É—Å—Ç—ã–º –∫–ª–µ—Ç–∫–∞–º)
                            moves.append((r, c, current_r, current_c, False))
                        else:
                            # –ö–ª–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞
                            moves.append((r, c, current_r, current_c, True)) # –≠—Ç–æ –∑–∞—Ö–≤–∞—Ç
                    elif piece_on_path_color == player_color:
                        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–≤–æ–µ–π —Ñ–∏–≥—É—Ä–æ–π
                        break
                    elif piece_on_path_color == opponent_color:
                        if captured_piece_pos is None:
                            # –ù–∞—à–ª–∏ –ø–µ—Ä–≤—É—é —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
                            captured_piece_pos = (current_r, current_c)
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
                        else:
                            # –£–∂–µ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ —Ñ–∏–≥—É—Ä—É –Ω–∞ —ç—Ç–æ–π –ª–∏–Ω–∏–∏, –Ω–µ–ª—å–∑—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞ –æ–¥–∏–Ω –ø—Ä—ã–∂–æ–∫
                            break # –î–∞–º–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ –¥–≤–µ —Ñ–∏–≥—É—Ä—ã –ø–æ–¥—Ä—è–¥
                    
                    current_r += dr
                    current_c += dc
        return moves

    def get_all_possible_moves(self, player_color):
        all_moves = [] # –û–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã
        all_captures = [] # –•–æ–¥—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –º—É–ª—å—Ç–∏-–ø—Ä—ã–∂–∫–∞), –æ–Ω –≤—Å–µ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if self.mandatory_capture_from_pos:
            r, c = self.mandatory_capture_from_pos
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã –∏–∑ —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            # –í–∞–∂–Ω–æ: _get_moves_for_piece(r,c) —É–∂–µ –≤–µ—Ä–Ω–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã.
            return [m for m in self._get_moves_for_piece(r, c) if m[4]]
            
        for r in range(8):
            for c in range(8):
                piece = self.get_piece_at(r, c)
                if self._get_player_color(piece) == player_color:
                    moves_for_piece = self._get_moves_for_piece(r, c)
                    for move in moves_for_piece:
                        if move[4]: # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç
                            all_captures.append(move)
                        else:
                            all_moves.append(move)
        
        # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è –≤–∫–ª—é—á–µ–Ω—ã –ò –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∑–∞—Ö–≤–∞—Ç, –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
        if self.mandatory_captures_enabled and all_captures: 
            return all_captures # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã
        
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã (–æ–±—ã—á–Ω—ã–µ + –∑–∞—Ö–≤–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
        return all_moves + all_captures

    def _execute_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        piece = self.get_piece_at(start_r, start_c)
        self._set_piece_at(end_r, end_c, piece)
        self._set_piece_at(start_r, start_c, EMPTY)

        if is_capture_move:
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞
            dr_diff = end_r - start_r
            dc_diff = end_c - start_c
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —à–∞–≥–æ–≤
            dr_norm = 0
            if dr_diff != 0:
                dr_norm = dr_diff // abs(dr_diff)
            
            dc_norm = 0
            if dc_diff != 0:
                dc_norm = dc_diff // abs(dc_diff)

            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –ø—É—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–ª–µ—Ç–∫–∏ –°–†–ê–ó–£ –ü–û–°–õ–ï —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            current_r, current_c = start_r + dr_norm, start_c + dc_norm
            while self._is_valid_coord(current_r, current_c) and (current_r, current_c) != (end_r, end_c):
                if self.get_piece_at(current_r, current_c) != EMPTY:
                    # –ù–∞–π–¥–µ–Ω–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
                    self._set_piece_at(current_r, current_c, EMPTY)
                    break # –ó–∞ –æ–¥–∏–Ω –ø—Ä—ã–∂–æ–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–∏–≥—É—Ä–∞
                current_r += dr_norm
                current_c += dc_norm
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±—ã–ª –ª–∏ –∑–∞—Ö–≤–∞—Ç
        return is_capture_move

    def make_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        # piece_before_move = self.get_piece_at(start_r, start_c) # –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å

        self._execute_move(start_r, start_c, end_r, end_c, is_capture_move)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É
        # –í–∞–∂–Ω–æ: –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ö–æ–¥–∞, –∏ –µ—Å–ª–∏ —à–∞—à–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–∞–º–∫–æ–π,
        # –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –æ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–∂–µ –∫–∞–∫ –¥–∞–º–∫–∞.
        piece_after_move = self.get_piece_at(end_r, end_c) # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–≥—É—Ä—É –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if piece_after_move == WHITE_MAN and end_r == 0:
            self._set_piece_at(end_r, end_c, WHITE_KING)
            piece_after_move = WHITE_KING # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        elif piece_after_move == BLACK_MAN and end_r == 7:
            self._set_piece_at(end_r, end_c, BLACK_KING)
            piece_after_move = BLACK_KING # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã

        if is_capture_move:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–º—É–ª—å—Ç–∏-–ø—Ä—ã–∂–æ–∫)
            # –ü—Ä–∏ —ç—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º piece_after_move, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É
            self.mandatory_capture_from_pos = (end_r, end_c) # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ–±—ã _get_moves_for_piece —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            further_captures = [m for m in self._get_moves_for_piece(end_r, end_c) if m[4]]
            
            if further_captures:
                # –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã, —Ñ–∏–≥—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π, –∏ —Ö–æ–¥ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
                return True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã
            else:
                # –ó–∞—Ö–≤–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
                self.mandatory_capture_from_pos = None
                self.switch_turn()
                return False # –ó–∞—Ö–≤–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
        else:
            # –û–±—ã—á–Ω—ã–π —Ö–æ–¥, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç (–µ—Å–ª–∏ –±—ã–ª) –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
            self.mandatory_capture_from_pos = None
            self.switch_turn()
            return False # –û–±—ã—á–Ω—ã–π —Ö–æ–¥, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç

    def switch_turn(self):
        self.current_player = self._get_opponent_color(self.current_player)

    def is_game_over(self):
        white_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "white")
        black_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "black")

        if white_pieces == 0:
            return "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö"
        if black_pieces == 0:
            return "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É *—Ç–µ–∫—É—â–µ–≥–æ* –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
        # –ï—Å–ª–∏ get_all_possible_moves –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç —Ö–æ–¥–æ–≤ –Ω–µ—Ç.
        if not self.get_all_possible_moves(self.current_player):
            if self.current_player == "white":
                return "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö (–Ω–µ—Ç —Ö–æ–¥–æ–≤ —É –±–µ–ª—ã—Ö)"
            else:
                return "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö (–Ω–µ—Ç —Ö–æ–¥–æ–≤ —É —á–µ—Ä–Ω—ã—Ö)"

        return None

    def to_list_of_emojis(self, selected_pos=None, possible_moves_with_info=None):
        board_emojis = []
        possible_moves_with_info = possible_moves_with_info if possible_moves_with_info else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–ª–µ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        # move_info is (end_r, end_c, is_capture)
        possible_move_targets_map = {(move_info[0], move_info[1]): move_info[2] for move_info in possible_moves_with_info}

        for r in range(8):
            row_emojis = []
            for c in range(8):
                piece = self.get_piece_at(r, c)
                
                # –ë–∞–∑–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–ª–µ—Ç–∫–∏
                # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —Å–≤–µ—Ç–ª–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ —Å–≤–µ—Ç–ª–æ–π –∫–ª–µ—Ç–∫–∏.
                # –ï—Å–ª–∏ —Ç–µ–º–Ω–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ —Ñ–∏–≥—É—Ä—ã –∏–ª–∏ –ø—É—Å—Ç–æ–≥–æ –º–µ—Å—Ç–∞.
                current_cell_emoji = PIECE_EMOJIS['light'] if (r + c) % 2 == 0 else PIECE_EMOJIS[piece]
                
                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—å—é —Ö–æ–¥–∞
                if (r, c) == selected_pos:
                    current_cell_emoji = PIECE_EMOJIS['selected']
                elif (r, c) in possible_move_targets_map:
                    is_capture_move = possible_move_targets_map[(r, c)]
                    current_cell_emoji = PIECE_EMOJIS['capture_target'] if is_capture_move else PIECE_EMOJIS['move_target']
                
                row_emojis.append(current_cell_emoji)
            board_emojis.append(row_emojis)
        return board_emojis
    
    def get_valid_moves_for_selection(self, current_r, current_c):
        piece = self.get_piece_at(current_r, current_c)
        if self._get_player_color(piece) != self.current_player:
            return [] # –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —á—É–∂—É—é —Ñ–∏–≥—É—Ä—É –∏–ª–∏ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É

        piece_moves_full_info = self._get_moves_for_piece(current_r, current_c)
        
        all_game_moves_full_info = self.get_all_possible_moves(self.current_player)
        # all_game_moves_full_info —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è,
        # —Ç–∞–∫ —á—Ç–æ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å all_game_captures_full_info.
        
        valid_moves_for_selection = []

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–º—É–ª—å—Ç–∏-–ø—Ä—ã–∂–æ–∫)
        if self.mandatory_capture_from_pos:
            if (current_r, current_c) == self.mandatory_capture_from_pos:
                # –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –µ–µ –∑–∞—Ö–≤–∞—Ç—ã
                valid_moves_for_selection = [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if is_cap]
            else:
                # –í—ã–±—Ä–∞–Ω–∞ –Ω–µ —Ç–∞ —Ñ–∏–≥—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –¥–µ–ª–∞—Ç—å –º—É–ª—å—Ç–∏-–ø—Ä—ã–∂–æ–∫
                valid_moves_for_selection = []
        else:
            # –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ö–æ–¥—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞
            # (–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É—á–ª–∏ mandatory_captures_enabled).
            for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info:
                if (s_r, s_c, e_r, e_c, is_cap) in all_game_moves_full_info:
                    valid_moves_for_selection.append((e_r, e_c, is_cap))

        return valid_moves_for_selection


@loader.tds
class Checkers(loader.Module):
    """–®–∞—à–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤–¥–≤–æ—ë–º."""
    strings = {
        "name": "–®–∞—à–∫–∏"
    }

    async def client_ready(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
        # self.db —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –æ—Ç loader.Module, –ø–æ—ç—Ç–æ–º—É self.db = self.get_db() –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
        await self.purgeSelf() # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è

    async def purgeSelf(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã."""
        self._board_obj = None
        self._game_message = None # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É.
        self._game_chat_id = None
        self._selected_piece_pos = None
        self._possible_moves_for_selected = []
        self.colorName = "—Ä–∞–Ω–¥–æ–º" # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ü–≤–µ—Ç–∞ —Ö–æ—Å—Ç–∞
        self.host_color = None # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç —Ö–æ—Å—Ç–∞ (white/black)
        self.game_running = False
        self.game_reason_ended = None # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        self.players_ids = []
        self.host_id = None
        self.opponent_id = None # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –∏–≥—Ä–∞ "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
        self.opponent_name = None # –ú–æ–∂–µ—Ç –±—ã—Ç—å "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π", –µ—Å–ª–∏ –∏–≥—Ä–∞ "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
        self.player_white_id = None
        self.player_black_id = None
        self._game_board_call = None # –°–æ—Ö—Ä–∞–Ω—è–µ–º 'call' –æ–±—ä–µ–∫—Ç –æ—Ç inline.form/accept_game –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∑—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.mandatory_captures_enabled = self.db.get("checkers_module", "mandatory_captures_enabled", True)

    async def settings_menu(self, call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id != self.host_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏!")
            return  
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±–µ–ª—ã–π"
        elif self.host_color == "black":
            current_host_color_display = "—á—ë—Ä–Ω—ã–π"
        else:
            current_host_color_display = "—Ä–∞–Ω–¥–æ–º"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–ø–ø–æ–Ω–µ–Ω—Ç –∏–ª–∏ "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
        opponent_name_display_for_settings = "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
        invite_text_prefix_for_settings = "–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?"
        if self.opponent_id: # –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–ø–ø–æ–Ω–µ–Ω—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω
            try:
                opponent_entity = await self.client.get_entity(self.opponent_id)
                opponent_name_display_for_settings = html.escape(opponent_entity.first_name)
            except Exception:
                pass # Fallback if entity not found
            invite_text_prefix_for_settings = f"<a href='tg://user?id={self.opponent_id}'>{opponent_name_display_for_settings}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?"

        await call.edit(
            text=f"{invite_text_prefix_for_settings}\n-- --\n"
                 f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                 f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {current_host_color_display} —Ü–≤–µ—Ç\n"
                 f"| - > ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if self.mandatory_captures_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}",
            reply_markup=[
                [
                    {"text":f"–¶–≤–µ—Ç (—Ö–æ—Å—Ç–∞): {current_host_color_display}","callback":self.set_color}
                ],
                [
                    {"text":f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è: {'–í–∫–ª' if self.mandatory_captures_enabled else '–í—ã–∫–ª'}","callback":self.toggle_mandatory_captures}
                ],
                [
                    {"text":"–í–µ—Ä–Ω—É—Ç—å—Å—è","callback":self.back_to_invite}
                ]
            ]
        )

    async def toggle_mandatory_captures(self, call):
        if call.from_user.id != self.host_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏!")
            return
        self.mandatory_captures_enabled = not self.mandatory_captures_enabled
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.set("checkers_module", "mandatory_captures_enabled", self.mandatory_captures_enabled)
        await self.settings_menu(call)

    async def back_to_invite(self, call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –¥–∞–∂–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        if call.from_user.id != self.host_id:
            await call.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∏–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        opponent_name_display = "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
        invite_text_prefix = "–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?"

        if self.opponent_id:
            try:
                opponent_entity = await self.client.get_entity(self.opponent_id)
                opponent_name_display = html.escape(opponent_entity.first_name)
            except Exception:
                pass # Fallback if entity not found
            invite_text_prefix = f"<a href='tg://user?id={self.opponent_id}'>{opponent_name_display}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±–µ–ª—ã–π"
        elif self.host_color == "black":
            current_host_color_display = "—á—ë—Ä–Ω—ã–π"
        else:
            current_host_color_display = "—Ä–∞–Ω–¥–æ–º"

        await call.edit(
            text=f"{invite_text_prefix}\n-- --\n"
                 f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                 f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {current_host_color_display} —Ü–≤–µ—Ç\n"
                 f"| - > ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if self.mandatory_captures_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}",
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù–µ—Ç", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu}
                ]
            ]
        )

    async def set_color(self, call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id != self.host_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–∞!")
            return
        
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±–µ–ª—ã–π"
        elif self.host_color == "black":
            current_host_color_display = "—á—ë—Ä–Ω—ã–π"
        else:
            current_host_color_display = "—Ä–∞–Ω–¥–æ–º"

        await call.edit(
            text=f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏.\n"
                 f"| - > –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞: {current_host_color_display} —Ü–≤–µ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –µ–≥–æ —Ñ–∏–≥—É—Ä",
            reply_markup=[
                [
                    {"text":"–ë–µ–ª—ã–µ","callback":self.handle_color_choice,"args":("white","–±–µ–ª—ã–π",)},
                    {"text":"–ß—ë—Ä–Ω—ã–µ","callback":self.handle_color_choice,"args":("black","—á—ë—Ä–Ω—ã–π",)}
                ],
                [
                    {"text":"–†–∞–Ω–¥–æ–º", "callback":self.handle_color_choice,"args":(None,"—Ä–∞–Ω–¥–æ–º")}
                ],
                [
                    {"text":"–û–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback":self.settings_menu}
                ]
            ]
        )

    async def handle_color_choice(self, call, color, txt):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id != self.host_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ü–≤–µ—Ç!")
            return
        self.colorName = txt
        self.host_color = color
        await self.set_color(call)

    @loader.command() 
    async def checkers(self, message):
        """[reply/username/id] –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —á–∞—Ç–µ. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π."""
        if self._board_obj: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞
            await message.edit("–ü–∞—Ä—Ç–∏—è —É–∂–µ –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –µ—ë —Å <code>.stopgame</code>")
            return
        await self.purgeSelf() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        self._game_message = message
        self._game_chat_id = message.chat_id
        self.host_id = message.sender_id

        opponent_found = False
        invite_text_prefix = ""

        if message.is_reply:
            r = await message.get_reply_message()
            opponent = r.sender
            self.opponent_id = opponent.id
            self.opponent_name = html.escape(opponent.first_name)
            opponent_found = True
        else:
            args = utils.get_args(message)
            if len(args) > 0:
                opponent_str = args[0]
                try:
                    if opponent_str.isdigit():
                        self.opponent_id = int(opponent_str)
                        opponent = await self.client.get_entity(self.opponent_id)
                        self.opponent_name = html.escape(opponent.first_name)
                    else:
                        opponent = await self.client.get_entity(opponent_str)
                        self.opponent_name = html.escape(opponent.first_name)
                        self.opponent_id = opponent.id
                    opponent_found = True
                except Exception:
                    await message.edit("–Ø –Ω–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
            # –ï—Å–ª–∏ args –ø—É—Å—Ç–æ–π, opponent_found –æ—Å—Ç–∞–µ—Ç—Å—è False, self.opponent_id –∏ self.opponent_name –æ—Å—Ç–∞—é—Ç—Å—è None
        
        if opponent_found:
            if self.opponent_id == self._game_message.sender_id:
                await message.edit("–û–¥–∏–Ω–æ—á–Ω—ã–µ —à–∞—à–∫–∏? –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ—Ç.")
                return
            self.players_ids = [self.opponent_id, self._game_message.sender_id]
            invite_text_prefix = f"<a href='tg://user?id={self.opponent_id}'>{self.opponent_name}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?"
        else: # –ï—Å–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω, –∏–≥—Ä–∞ –¥–ª—è "–ª—é–±–æ–≥–æ –∂–µ–ª–∞—é—â–µ–≥–æ"
            self.opponent_id = None # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –¥–ª—è "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
            self.opponent_name = "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
            # players_ids –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            invite_text_prefix = "–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?"
        
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±–µ–ª—ã–π"
        elif self.host_color == "black":
            current_host_color_display = "—á—ë—Ä–Ω—ã–π"
        else:
            current_host_color_display = "—Ä–∞–Ω–¥–æ–º"

        await self.inline.form(
            message = message,
            text = f"{invite_text_prefix}\n-- --\n"
                   f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                   f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {current_host_color_display} —Ü–≤–µ—Ç\n"
                   f"| - > ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if self.mandatory_captures_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}",
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù–µ—Ç", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu}
                ]
            ], 
            disable_security = True,
            on_unload=self.outdated_game
        )

    @loader.command() 
    async def stopgame(self, message):
        """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ (–¥–ª—è —Ö–æ—Å—Ç–∞ –∏–ª–∏ –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞)"""
        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ö–æ—Å—Ç—É –∏–ª–∏ –ª—é–±–æ–º—É –∏–∑ –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (opponent_id is None), —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if not self.game_running and self.opponent_id is None: # –ò–≥—Ä–∞ "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π" –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
            if message.from_user.id != self.host_id:
                await message.edit("–í—ã –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ—ë –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ –Ω–∞—á–∞–ª–∞.")
                return
        elif message.from_user.id != self.host_id and message.from_user.id not in self.players_ids:
            await message.edit("–í—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏ –∏ –Ω–µ –µ—ë –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")
            return

        if self._game_board_call: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞
            try:
                await self._game_board_call.edit(text="–ü–∞—Ä—Ç–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        elif self._game_message: # –ï—Å–ª–∏ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self._game_message.edit(text="–ü–∞—Ä—Ç–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception:
                pass
        
        await self.purgeSelf()
        await message.edit("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
        

    async def accept_game(self, call, data):
        if call.from_user.id == self.host_id:
            if self.opponent_id is None and data == 'n': # –•–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∏–≥—Ä—É "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π"
                await call.edit(text="–ü–∞—Ä—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                await self.purgeSelf()
                return
            await call.answer("–î–∞–π —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å!")
            return
        
        if data == 'y':
            if self.opponent_id is None: # –ï—Å–ª–∏ –∏–≥—Ä–∞ –¥–ª—è "–ª—é–±–æ–≥–æ –∂–µ–ª–∞—é—â–µ–≥–æ" –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª
                self.opponent_id = call.from_user.id
                try:
                    opponent_entity = await self.client.get_entity(self.opponent_id)
                    self.opponent_name = html.escape(opponent_entity.first_name)
                except Exception:
                    self.opponent_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"
                await call.answer(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –∫–∞–∫ {self.opponent_name}!")
                self.players_ids = [self.opponent_id, self.host_id] # –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º players_ids
            elif call.from_user.id != self.opponent_id: # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏–Ω—è–ª –Ω–µ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                await call.answer("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–≥—Ä—É!")
                return
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∏–≥—Ä–æ–∫, –ø—Ä–∏–Ω—è–≤—à–∏–π –≤—ã–∑–æ–≤, —è–≤–ª—è–µ—Ç—Å—è –ª–∏–±–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º,
            # –ª–∏–±–æ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ –≤ –∏–≥—Ä–µ "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π".
            
            self._board_obj = CheckersBoard(mandatory_captures_enabled=self.mandatory_captures_enabled) 
            
            if not self.host_color: # –ï—Å–ª–∏ —Ö–æ—Å—Ç –≤—ã–±—Ä–∞–ª "—Ä–∞–Ω–¥–æ–º"
                await call.edit(text="–í—ã–±–∏—Ä–∞—é —Å—Ç–æ—Ä–æ–Ω—ã...")
                await asyncio.sleep(0.5)
                self.host_color = self.ranColor()
            
            if self.host_color == "white":
                self.player_white_id = self.host_id
                self.player_black_id = self.opponent_id
            else: # host_color == "black"
                self.player_white_id = self.opponent_id
                self.player_black_id = self.host_id

            text = await self.get_game_status_text()
            await call.edit(text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏...")
            await asyncio.sleep(0.5)
            
            self.game_running = True
            self._game_board_call = call # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç 'call' –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            
            await call.edit(text="–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è —Ñ–∏–≥—É—Ä –≤–∫–ª—é—á–∏—Ç–µ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É!")
            await asyncio.sleep(2.5)
            await self.render_board(text, call)
        else: # data == 'n' (–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)
            if self.opponent_id is None: # –ï—Å–ª–∏ –∏–≥—Ä–∞ "–ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π", –∏ –Ω–µ —Ö–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç
                await call.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π.")
                return
            elif call.from_user.id != self.opponent_id: # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–µ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                await call.answer("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–≥—Ä—É!")
                return
            
            await call.edit(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            await self.purgeSelf()

    async def render_board(self, text, call):
        if not self._board_obj:
            await call.edit(text="–û—à–∏–±–∫–∞: –î–æ—Å–∫–∞ –∏–≥—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            await self.purgeSelf()
            return

        board_emojis = self._board_obj.to_list_of_emojis(self._selected_piece_pos, self._possible_moves_for_selected)
        
        btns = []
        for r in range(8):
            row_btns = []
            for c in range(8):
                row_btns.append({"text": board_emojis[r][c], "callback": self.handle_click, "args":(r, c,)})
            btns.append(row_btns)

        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°–¥–∞—Ç—å—Å—è"
        btns.append([{"text": "–°–¥–∞—Ç—å—Å—è", "callback": self.surrender_game}])

        await call.edit(
            text = text,
            reply_markup = btns,
            disable_security = True
        )
    
    async def surrender_game(self, call):
        user_id = call.from_user.id
        
        # –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ (–±–µ–ª—ã–µ –∏–ª–∏ —á–µ—Ä–Ω—ã–µ) –º–æ–≥—É—Ç —Å–¥–∞—Ç—å—Å—è.
        # –•–æ—Å—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .stopgame, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–≥—Ä–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω.
        if user_id not in [self.player_white_id, self.player_black_id]:
            await call.answer("–í—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .stopgame –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return

        surrendering_player_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"
        try:
            surrendering_player_entity = await self.client.get_entity(user_id)
            surrendering_player_name = html.escape(surrendering_player_entity.first_name)
        except Exception:
            pass

        winner_id = None
        winner_color_text = ""
        if user_id == self.player_white_id:
            winner_id = self.player_black_id
            winner_color_text = "—á–µ—Ä–Ω—ã—Ö"
        elif user_id == self.player_black_id:
            winner_id = self.player_white_id
            winner_color_text = "–±–µ–ª—ã—Ö"
        
        winner_name = "–û–ø–ø–æ–Ω–µ–Ω—Ç"
        if winner_id:
            try:
                winner_entity = await self.client.get_entity(winner_id)
                winner_name = html.escape(winner_entity.first_name)
            except Exception:
                pass

        surrender_message = (
            f"–ü–∞—Ä—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: <a href='tg://user?id={user_id}'>{surrendering_player_name}</a> —Å–¥–∞–ª—Å—è(–ª–∞—Å—å).\n"
            f"–ü–æ–±–µ–¥–∏–ª(–∞) <a href='tg://user?id={winner_id}'>{winner_name}</a> ({winner_color_text})!"
        )

        self.game_running = False
        self.game_reason_ended = surrender_message # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        
        await call.edit(surrender_message)
        await self.purgeSelf() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        
    async def handle_click(self, call, r, c):
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ.
        if not self._board_obj or not self.game_running:
            # –ï—Å–ª–∏ _board_obj None, –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ï—Å–ª–∏ game_running False, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
            await call.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            if self._board_obj: # –ï—Å–ª–∏ _board_obj —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ game_running False, –∑–Ω–∞—á–∏—Ç –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ.
                await self.purgeSelf() # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            return

        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            if self.game_running: # –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
                self.game_running = False
                self.game_reason_ended = game_over_status # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
                await self.render_board(await self.get_game_status_text(), call) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                await self.purgeSelf() # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
            await call.answer(f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}. –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .checkers")
            return # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –∏ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥
        if call.from_user.id not in self.players_ids: 
            await call.answer("–ü–∞—Ä—Ç–∏—è –Ω–µ –≤–∞—à–∞!")
            return
        
        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        if call.from_user.id != current_player_id:
            await call.answer("–°–µ–π—á–∞—Å —Ö–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞!")
            return

        piece_at_click = self._board_obj.get_piece_at(r, c)
        player_color_at_click = self._board_obj._get_player_color(piece_at_click)

        if self._selected_piece_pos is None:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—ã–±–æ—Ä —Ñ–∏–≥—É—Ä—ã
            if player_color_at_click == self._board_obj.current_player:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º—É–ª—å—Ç–∏-–∑–∞—Ö–≤–∞—Ç
                if self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_from_pos != (r, c):
                    await call.answer("–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏!")
                    return

                possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                
                if possible_moves_with_info:
                    self._selected_piece_pos = (r, c)
                    self._possible_moves_for_selected = possible_moves_with_info
                    await call.answer("–®–∞—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ–¥–∏—Ç—å.")
                    await self.render_board(await self.get_game_status_text(), call)
                else:
                    await call.answer("–î–ª—è —ç—Ç–æ–π —à–∞—à–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã)!")
            else:
                await call.answer("–¢—É—Ç –Ω–µ—Ç –≤–∞—à–µ–π —à–∞—à–∫–∏ –∏–ª–∏ —ç—Ç–æ —Å–≤–µ—Ç–ª–∞—è –∫–ª–µ—Ç–∫–∞!")
        else:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
            start_r, start_c = self._selected_piece_pos
            
            if (r, c) == (start_r, start_c):
                # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
                self._selected_piece_pos = None
                self._possible_moves_for_selected = []
                await call.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
                await self.render_board(await self.get_game_status_text(), call)
                return

            # –ò—â–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ü–µ–ª—å—é –¥–ª—è —Ö–æ–¥–∞
            target_move_info = None
            for move_info in self._possible_moves_for_selected:
                if (move_info[0], move_info[1]) == (r, c):
                    target_move_info = move_info
                    break

            if target_move_info:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
                end_r, end_c, is_capture_move = target_move_info
                made_capture_and_can_jump_again = self._board_obj.make_move(start_r, start_c, end_r, end_c, is_capture_move)
                
                if made_capture_and_can_jump_again:
                    # –ï—Å–ª–∏ –±—ã–ª –∑–∞—Ö–≤–∞—Ç –∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω (–º—É–ª—å—Ç–∏-–ø—Ä—ã–∂–æ–∫), —Ñ–∏–≥—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                    self._selected_piece_pos = (end_r, end_c)
                    self._possible_moves_for_selected = self._board_obj.get_valid_moves_for_selection(end_r, end_c)
                    await call.answer("–ó–∞—Ö–≤–∞—Ç! –°–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞—Ö–≤–∞—Ç.")
                else:
                    # –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                    self._selected_piece_pos = None
                    self._possible_moves_for_selected = []
                    await call.answer("–•–æ–¥ —Å–¥–µ–ª–∞–Ω.")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
                game_over_status_after_move = self._board_obj.is_game_over()
                if game_over_status_after_move:
                    self.game_running = False
                    self.game_reason_ended = game_over_status_after_move # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
                    await call.answer(f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status_after_move}")
                    await self.render_board(await self.get_game_status_text(), call) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                    await self.purgeSelf() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
                    return
                
                await self.render_board(await self.get_game_status_text(), call)
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—å—é –¥–ª—è —Ö–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–≤–æ—é —à–∞—à–∫—É
                if player_color_at_click == self._board_obj.current_player:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º—É–ª—å—Ç–∏-–∑–∞—Ö–≤–∞—Ç
                    if self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_from_pos != (r, c):
                        await call.answer("–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏!")
                        return
                    
                    possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                    
                    if possible_moves_with_info:
                        self._selected_piece_pos = (r, c)
                        self._possible_moves_for_selected = possible_moves_with_info
                        await call.answer("–í—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è —à–∞—à–∫–∞.")
                        await self.render_board(await self.get_game_status_text(), call)
                    else:
                        await call.answer("–î–ª—è —ç—Ç–æ–π —à–∞—à–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã)!")
                else:
                    await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥ –∏–ª–∏ —Ü–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–µ–π —à–∞—à–∫–æ–π!")

    async def get_game_status_text(self):
        # –ï—Å–ª–∏ –¥–æ—Å–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        if not self._board_obj:
            return "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Å–¥–∞—á–∏), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            if self.game_reason_ended:
                return self.game_reason_ended
            
            # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
            winner_name = ""
            if "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö" in game_over_status:
                try:
                    winner_name = html.escape((await self.client.get_entity(self.player_white_id)).first_name)
                    return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n–ü–æ–±–µ–¥–∏–ª(–∞) <a href='tg://user?id={self.player_white_id}'>{winner_name}</a> (–±–µ–ª—ã–µ)!"
                except Exception:
                    return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n–ü–æ–±–µ–¥–∏–ª(–∞) –ë–µ–ª—ã–µ!"
            elif "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö" in game_over_status:
                try:
                    winner_name = html.escape((await self.client.get_entity(self.player_black_id)).first_name)
                    return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n–ü–æ–±–µ–¥–∏–ª(–∞) <a href='tg://user?id={self.player_black_id}'>{winner_name}</a> (—á–µ—Ä–Ω—ã–µ)!"
                except Exception:
                    return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n–ü–æ–±–µ–¥–∏–ª(–∞) –ß–µ—Ä–Ω—ã–µ!"
            return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}"

        white_player_name = "–ë–µ–ª—ã–µ"
        black_player_name = "–ß—ë—Ä–Ω—ã–µ"
        try:
            white_player_entity = await self.client.get_entity(self.player_white_id)
            white_player_name = html.escape(white_player_entity.first_name)
        except Exception:
            pass
        
        try:
            black_player_entity = await self.client.get_entity(self.player_black_id)
            black_player_name = html.escape(black_player_entity.first_name)
        except Exception:
            pass

        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        current_player_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"
        try:
            current_player_name_entity = await self.client.get_entity(current_player_id)
            current_player_name = html.escape(current_player_name_entity.first_name)
        except Exception:
            pass
        
        status_text = f"‚ôî –ë–µ–ª—ã–µ - <a href='tg://user?id={self.player_white_id}'>{white_player_name}</a>\n‚ôö –ß—ë—Ä–Ω—ã–µ - <a href='tg://user?id={self.player_black_id}'>{black_player_name}</a>\n\n"
        
        if self._board_obj.current_player == "white":
            status_text += f"–•–æ–¥ –±–µ–ª—ã—Ö (<a href='tg://user?id={current_player_id}'>{current_player_name}</a>)"
        else:
            status_text += f"–•–æ–¥ —á—ë—Ä–Ω—ã—Ö (<a href='tg://user?id={current_player_id}'>{current_player_name}</a>)"
        
        status_text += f"\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if self.mandatory_captures_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}"

        if self._board_obj.mandatory_capture_from_pos:
            status_text += "\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç!"

        return status_text

    async def outdated_game(self):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–º).
        if self.game_running or self._board_obj: # –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ
            if self._game_board_call: # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await self._game_board_call.edit(text="–ü–∞—Ä—Ç–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                except Exception:
                    pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            elif self._game_message: # –ï—Å–ª–∏ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await self._game_message.edit(text="–ü–∞—Ä—Ç–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                except Exception:
                    pass
            await self.purgeSelf() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã

    def ranColor(self):
        return "white" if random.randint(1,2) == 1 else "black"
