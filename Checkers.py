# meta developer: @Androfon_AI
# meta name: Checkers
# meta version: 1.0.7
# –ê –≤—ã –∑–Ω–∞–ª–∏ —á—Ç–æ –ª–æ—â–∞–¥—å –º–æ–∂–µ—Ç –¥–æ–∂–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?

import asyncio, html, random
from .. import loader, utils

EMPTY = 0
WHITE_MAN = 1
BLACK_MAN = 2
WHITE_KING = 3
BLACK_KING = 4

PIECE_EMOJIS = {
    EMPTY: ".", # –¢–µ–º–Ω–∞—è –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    "light": " ", # –°–≤–µ—Ç–ª–∞—è –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    WHITE_MAN: "‚ö™",
    BLACK_MAN: "‚ö´",
    WHITE_KING: "üåö",
    BLACK_KING: "üåù",
    'selected': "üîò",
    'move_target': "üü¢",
    'capture_target': "üî¥",
}

class CheckersBoard:
    def __init__(self, mandatory_capture_enabled=True):
        self._board = [[EMPTY for _ in range(8)] for _ in range(8)]
        self._setup_initial_pieces()
        self.current_player = "white"
        self.mandatory_capture_from_pos = None # (r, c) –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–±—è–∑–∞–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        self.mandatory_capture_enabled = mandatory_capture_enabled # –ù–∞—Å—Ç—Ä–æ–π–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç

    def _setup_initial_pieces(self):
        for r in range(8):
            for c in range(8):
                if (r + c) % 2 != 0: # –¢–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
                    if r < 3:
                        self._board[r][c] = BLACK_MAN
                    elif r > 4:
                        self._board[r][c] = WHITE_MAN

    def _is_valid_coord(self, r, c):
        return 0 <= r < 8 and 0 <= c < 8

    def get_piece_at(self, r, c):
        if not self._is_valid_coord(r, c):
            return None
        return self._board[r][c]

    def _set_piece_at(self, r, c, piece):
        if self._is_valid_coord(r, c):
            self._board[r][c] = piece

    def _get_player_color(self, piece):
        if piece in [WHITE_MAN, WHITE_KING]:
            return "white"
        if piece in [BLACK_MAN, BLACK_KING]:
            return "black"
        return None

    def _get_opponent_color(self, color):
        return "black" if color == "white" else "white"

    def _get_moves_for_piece(self, r, c):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è —Ñ–∏–≥—É—Ä—ã –≤ (r, c).
        –ö–∞–∂–¥—ã–π —Ö–æ–¥ - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂: (start_r, start_c, end_r, end_c, is_capture_move).
        """
        moves = []
        piece = self.get_piece_at(r, c)
        player_color = self._get_player_color(piece)
        opponent_color = self._get_opponent_color(player_color)

        if piece == EMPTY:
            return []

        all_diagonal_directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        
        if piece in [WHITE_MAN, BLACK_MAN]:
            regular_move_directions = []
            if piece == WHITE_MAN:
                regular_move_directions = [(-1, -1), (-1, 1)] # –ë–µ–ª—ã–µ —Ö–æ–¥—è—Ç –≤–≤–µ—Ä—Ö
            elif piece == BLACK_MAN:
                regular_move_directions = [(1, -1), (1, 1)] # –ß–µ—Ä–Ω—ã–µ —Ö–æ–¥—è—Ç –≤–Ω–∏–∑

            # –û–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —à–∞—à–µ–∫ (–Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É)
            for dr, dc in regular_move_directions:
                new_r, new_c = r + dr, c + dc
                if self._is_valid_coord(new_r, new_c) and self.get_piece_at(new_r, new_c) == EMPTY:
                    moves.append((r, c, new_r, new_c, False))

            # –•–æ–¥—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º –¥–ª—è —à–∞—à–µ–∫ (—á–µ—Ä–µ–∑ –æ–¥–Ω—É —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É)
            for dr, dc in all_diagonal_directions:
                captured_piece_r, captured_piece_c = r + dr, c + dc
                jump_r, jump_c = r + 2 * dr, c + 2 * dc
                
                captured_piece = self.get_piece_at(captured_piece_r, captured_piece_c)

                if (self._is_valid_coord(jump_r, jump_c) and
                    self.get_piece_at(jump_r, jump_c) == EMPTY and
                    self._get_player_color(captured_piece) == opponent_color):
                    
                    moves.append((r, c, jump_r, jump_c, True))

        elif piece in [WHITE_KING, BLACK_KING]:
            for dr, dc in all_diagonal_directions:
                # –û–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –∫–æ—Ä–æ–ª–µ–π (—Å–∫–æ–ª—å–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫)
                current_r, current_c = r + dr, c + dc
                while self._is_valid_coord(current_r, current_c) and self.get_piece_at(current_r, current_c) == EMPTY:
                    moves.append((r, c, current_r, current_c, False))
                    current_r += dr
                    current_c += dc

                # –•–æ–¥—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º –¥–ª—è –∫–æ—Ä–æ–ª–µ–π (–∑–∞—Ö–≤–∞—Ç –æ–¥–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–∑–µ–º–ª–∏—Ç—å—Å—è
                # –Ω–∞ –ª—é–±—É—é –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É –∑–∞ –Ω–µ–π –ø–æ —Ç–æ–π –∂–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
                temp_r, temp_c = r + dr, c + dc
                found_opponent_piece = False
                while self._is_valid_coord(temp_r, temp_c):
                    piece_on_path = self.get_piece_at(temp_r, temp_c)
                    piece_on_path_color = self._get_player_color(piece_on_path)

                    if piece_on_path_color == player_color:
                        break # –ü—É—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–≤–æ–µ–π —Ñ–∏–≥—É—Ä–æ–π
                    elif piece_on_path_color == opponent_color:
                        if found_opponent_piece: # –£–∂–µ –Ω–∞—à–ª–∏ –æ–¥–Ω—É —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –Ω–µ–ª—å–∑—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥
                            break
                        found_opponent_piece = True # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Ñ–∏–≥—É—Ä—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
                        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ *–ø–æ—Å–ª–µ* —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
                        jump_r, jump_c = temp_r + dr, temp_c + dc
                        while self._is_valid_coord(jump_r, jump_c) and self.get_piece_at(jump_r, jump_c) == EMPTY:
                            moves.append((r, c, jump_r, jump_c, True))
                            jump_r += dr
                            jump_c += dc
                        # –ü–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è, —ç—Ç–æ—Ç –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
                        # –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞—Ö–≤–∞—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–∏–≥—É—Ä—É.
                        break 
                    elif piece_on_path == EMPTY:
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ —Ñ–∏–≥—É—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
                        pass
                    
                    temp_r += dr
                    temp_c += dc

        return moves

    def get_all_possible_moves(self, player_color):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–∞–≤–∏–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞.
        """
        all_moves = []
        all_captures = []

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞
        if self.mandatory_capture_from_pos and self.mandatory_capture_enabled:
            r, c = self.mandatory_capture_from_pos
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑ —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            return [m for m in self._get_moves_for_piece(r, c) if m[4]]
            
        # –ò–Ω–∞—á–µ –∏—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        for r in range(8):
            for c in range(8):
                piece = self.get_piece_at(r, c)
                if self._get_player_color(piece) == player_color:
                    moves_for_piece = self._get_moves_for_piece(r, c)
                    for move in moves_for_piece:
                        if move[4]: # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç
                            all_captures.append(move)
                        else:
                            all_moves.append(move)
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∑–∞—Ö–≤–∞—Ç
        # –∏ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, —Ç–æ –∏–≥—Ä–æ–∫ –æ–±—è–∑–∞–Ω —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ö–≤–∞—Ç.
        if all_captures and self.mandatory_capture_enabled:
            return all_captures
        
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã (–æ–±—ã—á–Ω—ã–µ –∏, –µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω, –∑–∞—Ö–≤–∞—Ç—ã)
        return all_moves

    def _execute_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∑–∞—Ö–≤–∞—Ç."""
        piece = self.get_piece_at(start_r, start_c)
        self._set_piece_at(end_r, end_c, piece)
        self._set_piece_at(start_r, start_c, EMPTY)

        if is_capture_move:
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
            dr_norm = 0
            if end_r != start_r:
                dr_norm = (end_r - start_r) // abs(end_r - start_r)
            
            dc_norm = 0
            if end_c != start_c:
                dc_norm = (end_c - start_c) // abs(end_c - start_c)

            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –ø—É—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É.
            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –æ—Ç –∫–ª–µ—Ç–∫–∏, —Å–ª–µ–¥—É—é—â–µ–π –∑–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π.
            current_r, current_c = start_r + dr_norm, start_c + dc_norm
            while self._is_valid_coord(current_r, current_c) and (current_r, current_c) != (end_r, end_c):
                if self.get_piece_at(current_r, current_c) != EMPTY:
                    # –ù–∞–π–¥–µ–Ω–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∏–≥—É—Ä–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ –ª–æ–≥–∏–∫–µ _get_moves_for_piece)
                    self._set_piece_at(current_r, current_c, EMPTY)
                    break # –ó–∞ –æ–¥–∏–Ω –ø—Ä—ã–∂–æ–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–∏–≥—É—Ä–∞
                current_r += dr_norm
                current_c += dc_norm
        
        return is_capture_move

    def make_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫–∏ –∏ –ª–æ–≥–∏–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª –∑–∞—Ö–≤–∞—Ç –∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω, –∏–Ω–∞—á–µ False.
        """
        piece = self.get_piece_at(start_r, start_c)
        
        self._execute_move(start_r, start_c, end_r, end_c, is_capture_move)
        
        # –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫–∏
        if piece == WHITE_MAN and end_r == 0: # –ë–µ–ª–∞—è —à–∞—à–∫–∞ –¥–æ—à–ª–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            self._set_piece_at(end_r, end_c, WHITE_KING)
        elif piece == BLACK_MAN and end_r == 7: # –ß–µ—Ä–Ω–∞—è —à–∞—à–∫–∞ –¥–æ—à–ª–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            self._set_piece_at(end_r, end_c, BLACK_KING)
        
        if is_capture_move:
            if self.mandatory_capture_enabled:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                further_captures = [m for m in self._get_moves_for_piece(end_r, end_c) if m[4]]
                if further_captures:
                    self.mandatory_capture_from_pos = (end_r, end_c)
                    return True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞—Ö–≤–∞—Ç—ã (—Ö–æ–¥ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç)
                else:
                    self.mandatory_capture_from_pos = None
                    self.switch_turn()
                    return False # –ó–∞—Ö–≤–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
            else: # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω, —Ö–æ–¥ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ —Ö–æ–¥–∞ (–¥–∞–∂–µ –∑–∞—Ö–≤–∞—Ç–∞)
                self.mandatory_capture_from_pos = None
                self.switch_turn()
                return False
        else: # –û–±—ã—á–Ω—ã–π —Ö–æ–¥
            self.mandatory_capture_from_pos = None
            self.switch_turn()
            return False # –û–±—ã—á–Ω—ã–π —Ö–æ–¥, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç

    def switch_turn(self):
        self.current_player = self._get_opponent_color(self.current_player)

    def is_game_over(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã: –Ω–µ—Ç —Ñ–∏–≥—É—Ä –∏–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤."""
        white_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "white")
        black_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "black")

        if white_pieces == 0:
            return "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö (–≤—Å–µ –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã –∑–∞—Ö–≤–∞—á–µ–Ω—ã)"
        if black_pieces == 0:
            return "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö (–≤—Å–µ —á–µ—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –∑–∞—Ö–≤–∞—á–µ–Ω—ã)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
        if not self.get_all_possible_moves("white"):
            return "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö (–Ω–µ—Ç —Ö–æ–¥–æ–≤ —É –±–µ–ª—ã—Ö)"
        if not self.get_all_possible_moves("black"):
            return "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö (–Ω–µ—Ç —Ö–æ–¥–æ–≤ —É —á–µ—Ä–Ω—ã—Ö)"

        return None # –ò–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞

    def to_list_of_emojis(self, selected_pos=None, possible_moves_with_info=None):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã.
        """
        board_emojis = []
        possible_moves_with_info = possible_moves_with_info if possible_moves_with_info else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–ª–µ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {(end_r, end_c): is_capture_move}
        possible_move_targets_map = {(move_info[0], move_info[1]): move_info[2] for move_info in possible_moves_with_info}

        for r in range(8):
            row_emojis = []
            for c in range(8):
                piece = self.get_piece_at(r, c)
                emoji = PIECE_EMOJIS[piece] # –≠–º–æ–¥–∑–∏ —Ñ–∏–≥—É—Ä—ã –∏–ª–∏ —Ç–µ–º–Ω–æ–π –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏

                if (r, c) == selected_pos:
                    emoji = PIECE_EMOJIS['selected']
                elif (r, c) in possible_move_targets_map:
                    is_capture_move = possible_move_targets_map[(r, c)]
                    emoji = PIECE_EMOJIS['capture_target'] if is_capture_move else PIECE_EMOJIS['move_target']
                elif (r + c) % 2 == 0: # –°–≤–µ—Ç–ª—ã–µ –∫–ª–µ—Ç–∫–∏
                    emoji = PIECE_EMOJIS['light'] # –ï—Å–ª–∏ —ç—Ç–æ —Å–≤–µ—Ç–ª–∞—è –∫–ª–µ—Ç–∫–∞ –∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞/–Ω–µ —Ü–µ–ª—å
                
                row_emojis.append(emoji)
            board_emojis.append(row_emojis)
        return board_emojis
    
    def get_valid_moves_for_selection(self, current_r, current_c):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ü–µ–ª–µ–≤—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã (current_r, current_c),
        —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (end_r, end_c, is_capture_move).
        """
        piece_moves_full_info = self._get_moves_for_piece(current_r, current_c)
        
        all_game_moves_full_info = self.get_all_possible_moves(self.current_player)
        all_game_captures_full_info = [m for m in all_game_moves_full_info if m[4]] # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞—Ö–≤–∞—Ç
        if self.mandatory_capture_enabled and all_game_captures_full_info:
            if self.mandatory_capture_from_pos: # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç
                if (current_r, current_c) == self.mandatory_capture_from_pos:
                    # –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã –∏–∑ —ç—Ç–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if is_cap]
                else:
                    # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Å —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã, —Ç–æ —Ö–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã –Ω–µ—Ç
                    return []
            else: # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–∏–≥—É—Ä–µ (–Ω–∞—á–∞–ª–æ —Ü–µ–ø–æ—á–∫–∏ –∏–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞—Ö–≤–∞—Ç)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ö–≤–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞—Ö–≤–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
                return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if is_cap and (s_r,s_c,e_r,e_c,is_cap) in all_game_captures_full_info]
        else: # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—Ö–≤–∞—Ç–æ–≤
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ö–æ–¥—ã –¥–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–∞.
            return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if (s_r,s_c,e_r,e_c,is_cap) in all_game_moves_full_info]


@loader.tds
class Checkers(loader.Module):
    """–®–∞—à–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤–¥–≤–æ—ë–º."""
    strings = {
        "name": "–®–∞—à–∫–∏"
    }

    async def client_ready(self):
        self._board_obj = None # –û–±—ä–µ–∫—Ç –¥–æ—Å–∫–∏ CheckersBoard
        self._game_message = None # –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π .checkers
        self._game_chat_id = None # ID —á–∞—Ç–∞, –≥–¥–µ –∏–¥–µ—Ç –∏–≥—Ä–∞
        self._selected_piece_pos = None # (r, c) –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
        self._possible_moves_for_selected = [] # –°–ø–∏—Å–æ–∫ (end_r, end_c, is_capture_move) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
        self.saymyname = html.escape((await self.client.get_me()).first_name)
        self.owner_id = (await self.client.get_me()).id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.colorName = "—Ä–∞–Ω–¥–æ–º" # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ö–æ—Å—Ç–∞
        self.host_color = None # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç —Ö–æ—Å—Ç–∞ ("white", "black" –∏–ª–∏ None –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞)
        self.game_running = False # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        self.game_reason_ended = None # –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        self.players_ids = [] # –°–ø–∏—Å–æ–∫ ID –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.opponent_id = None # ID –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        self.opponent_name = None # –ò–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        self.player_white_id = None # ID –∏–≥—Ä–æ–∫–∞, –∏–≥—Ä–∞—é—â–µ–≥–æ –±–µ–ª—ã–º–∏
        self.player_black_id = None # ID –∏–≥—Ä–æ–∫–∞, –∏–≥—Ä–∞—é—â–µ–≥–æ —á–µ—Ä–Ω—ã–º–∏
        self._game_board_call = None # –û–±—ä–µ–∫—Ç call, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ—Å–∫–æ–π
        self.mandatory_capture_enabled = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤–∫–ª—é—á–µ–Ω

    async def purgeSelf(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã."""
        self._board_obj = None
        self._game_message = None
        self._game_chat_id = None
        self._selected_piece_pos = None
        self._possible_moves_for_selected = []
        self.colorName = "—Ä–∞–Ω–¥–æ–º"
        self.host_color = None
        self.game_running = False
        self.game_reason_ended = None
        self.players_ids = []
        self.opponent_id = None
        self.opponent_name = None
        self.player_white_id = None
        self.player_black_id = None
        self._game_board_call = None
        self.mandatory_capture_enabled = True # –°–±—Ä–æ—Å –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # self.owner_id –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º

    async def settings_menu(self, call):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã."""
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id != self.owner_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏!")
            return  
        
        await call.edit(
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏\n"
                 f"| - > –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {self.colorName} —Ü–≤–µ—Ç\n"
                 f"| - > –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç: {'–í–∫–ª—é—á–µ–Ω' if self.mandatory_capture_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}",
            reply_markup=[
                [
                    {"text":f"–¶–≤–µ—Ç (—Ö–æ—Å—Ç–∞): {self.colorName}","callback":self.set_color}
                ],
                [
                    {"text":f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç: {'–í–∫–ª—é—á–µ–Ω' if self.mandatory_capture_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}","callback":self.toggle_mandatory_capture}
                ],
                [
                    {"text":"–í–µ—Ä–Ω—É—Ç—å—Å—è","callback":self.back_to_invite}
                ]
            ]
        )

    async def toggle_mandatory_capture(self, call):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞."""
        if call.from_user.id != self.owner_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        self.mandatory_capture_enabled = not self.mandatory_capture_enabled
        await call.answer(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —Ç–µ–ø–µ—Ä—å {'–í–∫–ª—é—á–µ–Ω' if self.mandatory_capture_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}")
        await self.settings_menu(call) # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

    async def back_to_invite(self, call):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if call.from_user.id != self.owner_id:
            await call.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return
        
        await call.edit(
            text=f"<a href='tg://user?id={self.opponent_id}'>{self.opponent_name}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?\n-- --\n"
                 f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                 f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {self.colorName} —Ü–≤–µ—Ç\n"
                 f"| - > ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç: {'–í–∫–ª—é—á–µ–Ω' if self.mandatory_capture_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}",
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù–µ—Ç", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu}
                ]
            ]
        )

    async def set_color(self, call):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ö–æ—Å—Ç–∞."""
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id != self.owner_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        
        await call.edit(
            text=f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏.\n"
                 f"| - > –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞: {self.colorName} —Ü–≤–µ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –µ–≥–æ —Ñ–∏–≥—É—Ä",
            reply_markup=[
                [
                    {"text":"–ë–µ–ª—ã–µ","callback":self.handle_color_choice,"args":("white","–±–µ–ª—ã–π",)},
                    {"text":"–ß—ë—Ä–Ω—ã–µ","callback":self.handle_color_choice,"args":("black","—á—ë—Ä–Ω—ã–π",)}
                ],
                [
                    {"text":"–†–∞–Ω–¥–æ–º", "callback":self.handle_color_choice,"args":(None,"—Ä–∞–Ω–¥–æ–º")}
                ],
                [
                    {"text":"–û–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback":self.settings_menu}
                ]
            ]
        )

    async def handle_color_choice(self, call, color, txt):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ö–æ—Å—Ç–æ–º."""
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if call.from_user.id != self.owner_id:
            await call.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —é–∑–µ—Ä–±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        
        self.colorName = txt
        self.host_color = color
        await self.set_color(call) # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞

    @loader.command() 
    async def checkers(self, message):
        """[reply/username/id] –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —á–∞—Ç–µ"""
        if self._board_obj:
            await message.edit("–ü–∞—Ä—Ç–∏—è —É–∂–µ –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –µ—ë —Å <code>.stopgame</code>")
            return
        
        await self.purgeSelf() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self._game_message = message
        self._game_chat_id = message.chat_id

        if message.is_reply:
            r = await message.get_reply_message()
            opponent = r.sender
            self.opponent_id = opponent.id
            self.opponent_name = html.escape(opponent.first_name)
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                await message.edit("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å –∫–µ–º –∏–≥—Ä–∞—Ç—å")
                return
            opponent_str = args[0]
            try:
                if opponent_str.isdigit():
                    self.opponent_id = int(opponent_str)
                    opponent = await self.client.get_entity(self.opponent_id)
                    self.opponent_name = html.escape(opponent.first_name)
                else:
                    opponent = await self.client.get_entity(opponent_str)
                    self.opponent_name = html.escape(opponent.first_name)
                    self.opponent_id = opponent.id
            except Exception:
                await message.edit("–Ø –Ω–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        if self.opponent_id == self._game_message.sender_id:
            await message.edit("–û–¥–∏–Ω–æ—á–Ω—ã–µ —à–∞—à–∫–∏? –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ—Ç.")
            return

        self.players_ids = [self.opponent_id, self._game_message.sender_id]
        
        await self.inline.form(
            message = message,
            text = f"<a href='tg://user?id={self.opponent_id}'>{self.opponent_name}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —à–∞—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ?\n-- --\n"
                   f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                   f"| - > ‚Ä¢ –•–æ—Å—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {self.colorName} —Ü–≤–µ—Ç\n"
                   f"| - > ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç: {'–í–∫–ª—é—á–µ–Ω' if self.mandatory_capture_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}",
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù–µ—Ç", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu}
                ]
            ], 
            disable_security = True, # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            on_unload=self.outdated_game # –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ "—É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–∏" —Ñ–æ—Ä–º—ã
        )

    @loader.command() 
    async def stopgame(self, message):
        """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä—É –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞.
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (_board_obj is None), –ª—é–±–æ–π –º–æ–∂–µ—Ç "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –µ–µ, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞–≤–∏—Å—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        if self._board_obj and message.from_user.id not in self.players_ids:
            await message.edit("–í—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏.")
            return

        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
        if self._game_board_call:
            try:
                await self._game_board_call.edit(text="–ü–∞—Ä—Ç–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception:
                pass # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        
        await self.purgeSelf()
        await message.edit("–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –æ—á–∏—â–µ–Ω—ã.")

    async def accept_game(self, call, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∏–≥—Ä—É."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –∏–≥—Ä—É, –∏ —á—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
        if call.from_user.id == self._game_message.sender_id:
            await call.answer("–î–∞–π —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å!")
            return
        if call.from_user.id not in self.players_ids:
            await call.answer("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–≥—Ä—É!")
            return
        
        if data == 'y':
            self._board_obj = CheckersBoard(mandatory_capture_enabled=self.mandatory_capture_enabled) # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
            if not self.host_color: # –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ
                await call.edit(text="–í—ã–±–∏—Ä–∞—é —Å—Ç–æ—Ä–æ–Ω—ã...")
                await asyncio.sleep(0.5)
                self.host_color = self.ranColor()
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º ID –∏–≥—Ä–æ–∫–æ–≤ –±–µ–ª—ã–º –∏ —á–µ—Ä–Ω—ã–º
            if self.host_color == "white":
                self.player_white_id = self._game_message.sender_id
                self.player_black_id = self.opponent_id
            else:
                self.player_white_id = self.opponent_id
                self.player_black_id = self._game_message.sender_id

            text = await self.get_game_status_text()
            await call.edit(text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏...")
            await asyncio.sleep(0.5)
            
            self.game_running = True
            self._game_board_call = call # –°–æ—Ö—Ä–∞–Ω—è–µ–º call –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É
            
            await call.edit(text="–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è —Ñ–∏–≥—É—Ä –≤–∫–ª—é—á–∏—Ç–µ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É!")
            await asyncio.sleep(2.5) # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.render_board(text, call) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å–∫—É
        else:
            await call.edit(text="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            await self.purgeSelf()

    async def render_board(self, text, call):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å–∫—É —à–∞—à–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        board_emojis = self._board_obj.to_list_of_emojis(self._selected_piece_pos, self._possible_moves_for_selected)
        
        btns = []
        for r in range(8):
            row_btns = []
            for c in range(8):
                row_btns.append({"text": board_emojis[r][c], "callback": self.handle_click, "args":(r, c,)})
            btns.append(row_btns)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"
        btns.append([{"text": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", "callback": self.stop_game_inline}])

        await call.edit(
            text = text,
            reply_markup = btns,
            disable_security = True # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω—É—Ç—Ä–∏ handle_click)
        )
    
    async def stop_game_inline(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É" –Ω–∞ –¥–æ—Å–∫–µ."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä—É –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤
        if call.from_user.id not in self.players_ids:
            await call.answer("–í—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏.")
            return
        
        await self.purgeSelf()
        await call.edit("–ü–∞—Ä—Ç–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º.")
        
    async def handle_click(self, call, r, c):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –¥–æ—Å–∫–∏."""
        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            await call.answer(f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}. –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .checkers")
            if self.game_running:
                 self.game_running = False
                 await self.purgeSelf() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            return
        
        if call.from_user.id not in self.players_ids:
            await call.answer("–ü–∞—Ä—Ç–∏—è –Ω–µ –≤–∞—à–∞ –∏–ª–∏ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–∞!")
            return
        
        if not self.game_running:
            await call.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (–Ω–µ –ø—Ä–∏–Ω—è—Ç–∞) –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            await self.purgeSelf()
            return
        
        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        if call.from_user.id != current_player_id:
            await call.answer("–°–µ–π—á–∞—Å —Ö–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞!")
            return

        piece_at_click = self._board_obj.get_piece_at(r, c)
        player_color_at_click = self._board_obj._get_player_color(piece_at_click)

        if self._selected_piece_pos is None:
            # –í—ã–±–æ—Ä —Ñ–∏–≥—É—Ä—ã
            if player_color_at_click == self._board_obj.current_player:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
                if self._board_obj.mandatory_capture_enabled and self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_from_pos != (r, c):
                    await call.answer("–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏!")
                    return

                possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                
                if possible_moves_with_info:
                    self._selected_piece_pos = (r, c)
                    # possible_moves_for_selected —Å–æ–¥–µ—Ä–∂–∏—Ç (end_r, end_c, is_capture_move)
                    self._possible_moves_for_selected = [(m[2], m[3], m[4]) for m in possible_moves_with_info] 
                    await call.answer("–®–∞—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ–¥–∏—Ç—å.")
                    await self.render_board(await self.get_game_status_text(), call)
                else:
                    await call.answer("–î–ª—è —ç—Ç–æ–π —à–∞—à–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã)!")
            else:
                await call.answer("–¢—É—Ç –Ω–µ—Ç –≤–∞—à–µ–π —à–∞—à–∫–∏ –∏–ª–∏ —ç—Ç–æ —Å–≤–µ—Ç–ª–∞—è –∫–ª–µ—Ç–∫–∞!")
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
            start_r, start_c = self._selected_piece_pos
            
            if (r, c) == (start_r, start_c):
                # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
                self._selected_piece_pos = None
                self._possible_moves_for_selected = []
                await call.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
                await self.render_board(await self.get_game_status_text(), call)
                return

            # –ò—â–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ü–µ–ª—å—é –¥–ª—è —Ö–æ–¥–∞
            target_move_info = None
            for move_info in self._possible_moves_for_selected: # move_info: (end_r, end_c, is_capture)
                if (move_info[0], move_info[1]) == (r, c):
                    target_move_info = move_info
                    break

            if target_move_info:
                end_r, end_c, is_capture_move = target_move_info
                made_capture_and_can_jump_again = self._board_obj.make_move(start_r, start_c, end_r, end_c, is_capture_move)
                
                # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ mandatory_capture_enabled
                if made_capture_and_can_jump_again and self._board_obj.mandatory_capture_enabled:
                    # –ï—Å–ª–∏ –±—ã–ª –∑–∞—Ö–≤–∞—Ç –∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω, —Ñ–∏–≥—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                    self._selected_piece_pos = (end_r, end_c)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞)
                    self._possible_moves_for_selected = [(m[2], m[3], m[4]) for m in self._board_obj.get_valid_moves_for_selection(end_r, end_c)]
                    await call.answer("–ó–∞—Ö–≤–∞—Ç! –°–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞—Ö–≤–∞—Ç.")
                else:
                    # –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                    self._selected_piece_pos = None
                    self._possible_moves_for_selected = []
                    await call.answer("–•–æ–¥ —Å–¥–µ–ª–∞–Ω.")
                
                game_over_status = self._board_obj.is_game_over()
                if game_over_status:
                    self.game_running = False
                    self.game_reason_ended = game_over_status
                    await call.answer(f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}")
                    await self.render_board(await self.get_game_status_text(), call) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                    await self.purgeSelf() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
                    return
                
                await self.render_board(await self.get_game_status_text(), call)
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—å—é –¥–ª—è —Ö–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–≤–æ—é —à–∞—à–∫—É
                if player_color_at_click == self._board_obj.current_player:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
                    if self._board_obj.mandatory_capture_enabled and self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_from_pos != (r, c):
                        await call.answer("–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏!")
                        return
                    
                    possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                    
                    if possible_moves_with_info:
                        self._selected_piece_pos = (r, c)
                        self._possible_moves_for_selected = [(m[2], m[3], m[4]) for m in possible_moves_with_info]
                        await call.answer("–í—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è —à–∞—à–∫–∞.")
                        await self.render_board(await self.get_game_status_text(), call)
                    else:
                        await call.answer("–î–ª—è —ç—Ç–æ–π —à–∞—à–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã)!")
                else:
                    await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥ –∏–ª–∏ —Ü–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–µ–π —à–∞—à–∫–æ–π!")

    async def get_game_status_text(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã (—á–µ–π —Ö–æ–¥, –∫—Ç–æ –∏–≥—Ä–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)."""
        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            self.game_running = False
            self.game_reason_ended = game_over_status
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            winner_name = ""
            if "–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö" in game_over_status:
                if self.player_white_id:
                    winner_name = html.escape((await self.client.get_entity(self.player_white_id)).first_name)
                    return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n–ü–æ–±–µ–¥–∏–ª(–∞) {winner_name} (–±–µ–ª—ã–µ)!"
            elif "–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö" in game_over_status:
                if self.player_black_id:
                    winner_name = html.escape((await self.client.get_entity(self.player_black_id)).first_name)
                    return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}\n\n–ü–æ–±–µ–¥–∏–ª(–∞) {winner_name} (—á–µ—Ä–Ω—ã–µ)!"
            return f"–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞: {game_over_status}"

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        white_player_entity = await self.client.get_entity(self.player_white_id)
        black_player_entity = await self.client.get_entity(self.player_black_id)
        
        white_player_name = html.escape(white_player_entity.first_name)
        black_player_name = html.escape(black_player_entity.first_name)

        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        current_player_name = html.escape((await self.client.get_entity(current_player_id)).first_name)
        
        status_text = f"‚ö™ –ë–µ–ª—ã–µ - {white_player_name}\n‚ö´ –ß—ë—Ä–Ω—ã–µ - {black_player_name}\n\n"
        
        if self._board_obj.current_player == "white":
            status_text += f"–•–æ–¥ –±–µ–ª—ã—Ö ({current_player_name})"
        else:
            status_text += f"–•–æ–¥ —á—ë—Ä–Ω—ã—Ö ({current_player_name})"
        
        if self._board_obj.mandatory_capture_from_pos and self._board_obj.mandatory_capture_enabled:
            status_text += "\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç!"
        elif not self._board_obj.mandatory_capture_enabled:
            status_text += "\n(–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω)"

        return status_text

    async def outdated_game(self):
        """
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ç–∞–π–º–∞—É—Ç—É).
        –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—á–∏—â–∞–µ–º –µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        if self.game_running or self._board_obj:
            await self.purgeSelf()
            # –ï—Å–ª–∏ _game_board_call —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–≥—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∞
            if self._game_board_call:
                try:
                    await self._game_board_call.edit(text="–ü–∞—Ä—Ç–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                except Exception:
                    pass # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ

    def ranColor(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç: "white" –∏–ª–∏ "black"."""
        return "white" if random.randint(1,2) == 1 else "black"
